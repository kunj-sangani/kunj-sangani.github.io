[{"categories":["Microsoft Graph"],"content":"Graph Developer Proxy: CLI tool that simulates API errors \u0026 mock responses for Microsoft Graph API. Facilitates error handling \u0026 app development.","date":"2023-Mar-25","objectID":"/2023/03/overview-graph-developer-proxy/","tags":["Microsoft Graph","Graph Developer Proxy"],"title":"Overview of Graph Developer Proxy","uri":"/2023/03/overview-graph-developer-proxy/"},{"categories":["Microsoft Graph"],"content":"Introduction Graph Developer Proxy is a tool that simulates API errors using the command line. This tool works for the Microsoft Graph API but can also be extended for other APIs as well. This tool can help applications catch API errors and handle them gracefully. This tool will even help mock the API response so that we do not need to hit the server while we are developing our application. Let us first install Graph Developer Proxy in our environment. ","date":"2023-Mar-25","objectID":"/2023/03/overview-graph-developer-proxy/:1:0","tags":["Microsoft Graph","Graph Developer Proxy"],"title":"Overview of Graph Developer Proxy","uri":"/2023/03/overview-graph-developer-proxy/"},{"categories":["Microsoft Graph"],"content":"Installation The best feature of Graph Developer Proxy is that it is independent of operating systems, so we can use it in any OS (Windows, macOS, or Linux). To install in Windows OS, follow the below steps: Navigate to the below link, which will take you to the latest version of Graph Developer Proxy. Lastest Release Download the zip file with “win” as the keyword; you can select either x64 or x86 based on your system architecture. Extract the zip file to a location of your choice. eg. I have selected “D:\\msgraph-developer-proxy-win-x64-v0.5.0” Now add the above-extracted path to the environment variable and run the below command in PowerShell. $Path = \"D:\\msgraph-developer-proxy-win-x64-v0.5.0\" $persistedPaths = [Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::User) -split ';' if ($persistedPaths -notcontains $Path) { $persistedPaths = $persistedPaths + $Path | where { $_ } [Environment]::SetEnvironmentVariable('Path', $persistedPaths -join ';', [System.EnvironmentVariableTarget]::User) } Note: Replace $Path value with the actual value of your Path ","date":"2023-Mar-25","objectID":"/2023/03/overview-graph-developer-proxy/:2:0","tags":["Microsoft Graph","Graph Developer Proxy"],"title":"Overview of Graph Developer Proxy","uri":"/2023/03/overview-graph-developer-proxy/"},{"categories":["Microsoft Graph"],"content":"Test the Installation Once the above steps are completed its time to check whether our installation was successful or not. To test follow the below steps Open PowerShell or Command Prompt Run the below command mgdp Note: If you face issue such as command not found, then please check whether the enviornment variable is present or not. 3. Few additional promots would be presented first time which would require Trusting the certificate named Titanium Root Certificate Authority Allowing the firewall access Finally our Graph Developer Proxy is up and running ","date":"2023-Mar-25","objectID":"/2023/03/overview-graph-developer-proxy/:3:0","tags":["Microsoft Graph","Graph Developer Proxy"],"title":"Overview of Graph Developer Proxy","uri":"/2023/03/overview-graph-developer-proxy/"},{"categories":["Microsoft Graph"],"content":"Replicate Error 429 To replicate error 429 for all Microsoft graph call we can use the below command and check the Microsoft graph API call using Graph Explorer mgdp --no-mocks --allowed-errors 429 --failure-rate 100 Let us open the Graph Explorer to test our Microsoft Graph API call returning 429 error ","date":"2023-Mar-25","objectID":"/2023/03/overview-graph-developer-proxy/:4:0","tags":["Microsoft Graph","Graph Developer Proxy"],"title":"Overview of Graph Developer Proxy","uri":"/2023/03/overview-graph-developer-proxy/"},{"categories":["Microsoft Graph"],"content":"Conclusion It becomes very easy to replicate API errors and specially for Microsoft Graph APIs as there could be scenarious which would be difficuly to replicate without Graph Developer Proxy ","date":"2023-Mar-25","objectID":"/2023/03/overview-graph-developer-proxy/:5:0","tags":["Microsoft Graph","Graph Developer Proxy"],"title":"Overview of Graph Developer Proxy","uri":"/2023/03/overview-graph-developer-proxy/"},{"categories":["Microsoft Teams"],"content":"This article explores how to create Tabs in Microsoft Teams using the Teams Toolkit.","date":"2022-Nov-07","objectID":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Using Teams Toolkit CLI For Creating Teams Tab","uri":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/"},{"categories":["Microsoft Teams"],"content":"Introduction There are multiple ways to create a Teams Tab project such as using the Teams Toolkit extension for Visual Studio code, Yeoman generator for Teams, etc. Among these options, one such option is to use Teams Toolkit CLI before creating a Teams Tab project using Team Toolkit CLI let’s understand what Teams Toolkit CLI is. ","date":"2022-Nov-07","objectID":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/:1:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Using Teams Toolkit CLI For Creating Teams Tab","uri":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/"},{"categories":["Microsoft Teams"],"content":"What is Teams Toolkit CLI? Teams Toolkit CLI is a command line interface that helps in Teams application development. It is available as a part of the node package manager because it is straightforward to use Teams Toolkit CLI in CI/CD pipelines to build and deploy our Teams application. The best part of Teams Toolkit CLI is it is an open-source project. So you can check out the source code using the below link. TeamsFx/packages/cli at dev · OfficeDev/TeamsFx (github.com) ","date":"2022-Nov-07","objectID":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/:2:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Using Teams Toolkit CLI For Creating Teams Tab","uri":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/"},{"categories":["Microsoft Teams"],"content":"How to Install Teams Toolkit CLI? To install Teams Toolkit CLI pre-requisite is to have NodeJS installed and use the LTS version of NodeJS if not already installed. Once your environment has NodeJS use the below command to install Teams Toolkit. npm install -g @microsoft/teamsfx-cli To List, all the commands available as part of Teams Toolkit CLI use the below command teamsfx -h ","date":"2022-Nov-07","objectID":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/:3:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Using Teams Toolkit CLI For Creating Teams Tab","uri":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/"},{"categories":["Microsoft Teams"],"content":"How to scaffold a new Teams Tab project? To create a new project using Teams Toolkit CLI there are two different ways Using an Interactive way Using a non Interactive way We will look into both ways ","date":"2022-Nov-07","objectID":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/:4:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Using Teams Toolkit CLI For Creating Teams Tab","uri":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/"},{"categories":["Microsoft Teams"],"content":"1) Using an Interactive way To leverage the interactive way of creating a Teams Tab project run the below command and then follow the below-specified steps teamsfx new 1. Select Create a new Teams app 2. Select Capabilities as Tab by using the arrow keys 3. Select the programming language as Typescript 4. Select the Workspace folder ./ Note: you can provide your path to the folder where you want the scaffolded project to be present 5. Provide the application name as TeamsTabUsingCLI Once we complete the above steps a new Teams Tab project will be created with the required files as displayed in the image below ","date":"2022-Nov-07","objectID":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/:4:1","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Using Teams Toolkit CLI For Creating Teams Tab","uri":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/"},{"categories":["Microsoft Teams"],"content":"2) Using non Interactive way To use a non-interactive form run the below command teamsfx new --interactive false --capabilities \"tab\" --programming-language \"typescript\" --folder \"./\" --app-name TeamsTabUsingCLI So by using just one command we can create a Teams Tab project with the required files ","date":"2022-Nov-07","objectID":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/:4:2","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Using Teams Toolkit CLI For Creating Teams Tab","uri":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/"},{"categories":["Microsoft Teams"],"content":"Conclusion Teams Toolkit CLI also known as TeamsFx CLI is a beneficial CLI tool for creating, building, and deploying Teams applications. It even helps create projects from samples provided by Microsoft ","date":"2022-Nov-07","objectID":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/:5:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Using Teams Toolkit CLI For Creating Teams Tab","uri":"/2022/11/using-teams-toolkit-cli-for-creating-teams-tab/"},{"categories":["Microsoft Teams"],"content":"Learn how to create Tabs in Microsoft Teams using the Teams Toolkit with this step-by-step guide.","date":"2022-Nov-03","objectID":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Teams Toolkit For Creating Microsoft Teams Tab","uri":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/"},{"categories":["Microsoft Teams"],"content":"Introduction Microsoft Teams is one of the most used collaborative platforms with 270 million monthly active users as of 2022. Microsoft teams have extensibility capabilities that help developers create their own applications. For this application, we have many application capabilities such as Personal apps, Tabs, Bots, Messaging extensions, Meeting extensions, and Webhook and connectors. In this article, we will leverage the capability of Tabs in Microsoft teams. We will go through step by step process of creating Tabs using Teams Toolkit. ","date":"2022-Nov-03","objectID":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/:1:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Teams Toolkit For Creating Microsoft Teams Tab","uri":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/"},{"categories":["Microsoft Teams"],"content":"What is Teams Toolkit? Teams toolkit is an extension in Visual studio code and Visual Studio which helps app development for Microsoft teams simple as it provides templates and samples for all different application capabilities. To install Teams Toolkit in Visual studio code follow the below steps, 1. Open Visual studio code 2. Navigate to the extension section in Visual studio code as displayed in the image below 3. Search for Teams Toolkit and Install the extension Once the Teams toolkit is installed Teams toolkit icon would be displayed on the primary bar which is present as left navigation in Visual studio code. ","date":"2022-Nov-03","objectID":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/:2:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Teams Toolkit For Creating Microsoft Teams Tab","uri":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/"},{"categories":["Microsoft Teams"],"content":"Create Teams Tab using Teams Toolkit To create a teams tab using the Teams toolkit use the below steps which would help us create a template for teams tabs that we can extend as per our requirement 1. Open Visual studio code 2. Click on the Teams Toolkit icon present on the primary bar of Visual studio code. Note This icon will be displayed after the teams toolkit is installed as explained in the above section. 3. Click on Create a new team app button which would provide two options Create a new Teams app and Start from a sample. We would select Create a new Teams app for this article but if you want to start from a sample you can select that option and explore all the samples provided by Microsoft which caters to specific business use case 4. We would have options to select one from different capabilities provided for Teams application development but for this article, we would select the Tabs option as displayed in the image below 5. We would be provided with two different options for selecting a programming language JavaScript and TypeScript. For this article let us select TypeScript, 6. Select the workspace folder where we want all our scaffolded files to be present 7. Provide the application name. For this article let us use HelloWorldTeamsTab Once all the above steps are completed a scaffolded project with different files would be opened in a new Visual studio code instance as displayed in the image below, ![](https://f4n3x6c5.stackpathcdn.com/article/teams-toolkit-for-creating-microsoft-teams-tab/Images/Image 9-1.png) ","date":"2022-Nov-03","objectID":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/:3:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Teams Toolkit For Creating Microsoft Teams Tab","uri":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/"},{"categories":["Microsoft Teams"],"content":"Million dollar question is how to test in Microsoft Teams The Teams toolkit helps us here as well. To test out the tab in Microsoft Teams follow the below steps 1. Navigate to the Teams toolkit extension present on the primary bar of Visual studio code 2. Click on the Sign in to Microsoft 365 options present under the Accounts section 3. If you do not have a developer tenant then you can create one by selecting the option Create a Microsoft 365 testing tenant or clicking on Sign in 4. Sign-in would happen in the browser so you can provide your email address and password and close the tab which got opened in the browser for login 5. Please confirm in the Accounts section whether your login was successful or not 6. Now to test just press the F5 key 7. A popup for installing an SSL certificate would appear which you should install and let the magic of Teams Toolkit work 8. A new browser with Teams would open with our app created using the Teams toolkit as displayed in the image below 9. We can select Add to a team and then select the team where we want to test 10. A tab configuration page would open we can select save and see our app in the Teams context ","date":"2022-Nov-03","objectID":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/:4:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Teams Toolkit For Creating Microsoft Teams Tab","uri":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/"},{"categories":["Microsoft Teams"],"content":"Project Structure All our code is present under the tabs folder which has an src folder that contains all our react components that are created as a part of the template we can change this code and update it as per our requirement ","date":"2022-Nov-03","objectID":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/:5:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Teams Toolkit For Creating Microsoft Teams Tab","uri":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/"},{"categories":["Microsoft Teams"],"content":"Conclusion Using Teams Toolkit it becomes very easy to create Teams application as it provides us with templates and the best part is we can even use the templates which are created under the templates folder for deploying it to Azure as these are bicep templates. Even implementing SSO in the Teams tab is very simple using the Teams Toolkit ","date":"2022-Nov-03","objectID":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/:6:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Teams Toolkit For Creating Microsoft Teams Tab","uri":"/2022/11/teams-toolkit-for-creating-microsoft-teams-tab/"},{"categories":["PowerShell"],"content":"Using PowerShell in macOS and automating Microsoft 365 tasks with cross-platform PnP PowerShell.","date":"2021-Aug-16","objectID":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/","tags":["macOs","PnP PowerShell"],"title":"How To Run PnP PowerShell In MacOS","uri":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Introduction There may be requirements where we need to use PowerShell and if we are using macOS then the question becomes how we can use PowerShell in macOS. But with Microsoft’s new approach of creating everything open source and cross-platform, we can achieve this very easily. But along with this, we would even have a look at how we can use cross-platform PnP PowerShell to automate our Microsoft 365 related tasks. To run PowerShell Script in Mac OS follow the below steps, ","date":"2021-Aug-16","objectID":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/:1:0","tags":["macOs","PnP PowerShell"],"title":"How To Run PnP PowerShell In MacOS","uri":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Step 1 - Install Homebrew To run PowerShell we need to have Homebrew; it is a package manager which is used for installing packages that are missing in macOS. Use the below command in the terminal to install Homebrew, /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" ","date":"2021-Aug-16","objectID":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/:2:0","tags":["macOs","PnP PowerShell"],"title":"How To Run PnP PowerShell In MacOS","uri":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Step 2 - Install PowerShell Once we have to install Homebrew now we are good to install PowerShell. This is also recommended by Microsoft for more details check the link. Use the below command to install PowerShell, brew cask install powershell To test if we have installed properly or not use the below command, pwsh Now let us walk through step by step process of using PnP.PowerShell is a cross-platform module for working with Microsoft 365 related activities. ","date":"2021-Aug-16","objectID":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/:3:0","tags":["macOs","PnP PowerShell"],"title":"How To Run PnP PowerShell In MacOS","uri":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Step 1 - Register the package source This step is required because we would like to add PowerShell salary as the package source provider so that we can install the module directly without an issue to do so run the below command, Register-PackageSource -Name PSNuGet -Location https://www.powershellgallery.com/api/v2 -ProviderName NuGet Now we have set the package source so that we can search for our required PnP.PowerShell module which we can use for our Microsoft 365 related PowerShell activities. ","date":"2021-Aug-16","objectID":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/:4:0","tags":["macOs","PnP PowerShell"],"title":"How To Run PnP PowerShell In MacOS","uri":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Step 2 - Install PnP PowerShell Now to work with PnP PowerShell we need to install dependencies for that we would require to run the below command, Install-Module PnP.PowerShell Now we are ready to use PnP PowerShell let us test that by connecting to any site collection. ","date":"2021-Aug-16","objectID":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/:5:0","tags":["macOs","PnP PowerShell"],"title":"How To Run PnP PowerShell In MacOS","uri":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Step 3 - Connect to SharePoint and get the web To connect to SharePoint we can use the Connect-PnPOnline command and we can even use web login or device login if in case you are using Multi-factor authentication. Connect-PnPOnline -Url https://testinglala-admin.sharepoint.com To get the web once we have logged in we can just use Get-PnPWeb which would provide us the web to the URL we have logged in using connect cmdlet. Get-PnPWeb ","date":"2021-Aug-16","objectID":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/:6:0","tags":["macOs","PnP PowerShell"],"title":"How To Run PnP PowerShell In MacOS","uri":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Conclusion With the help of PowerShell being cross-platform, we can use any operating system of our choice to leverage PowerShell and the best part is, it is even available in docker image as well. The previous version of PnP PowerShell, which was SharePointPnPPowerShellOnline, was not cross-platform, but thanks to CSOM for .net core has helped us with the new Module PnP.PowerShell which is now cross-platform so we can leverage it to automate our tasks irrespective of the operating system we are working with. ","date":"2021-Aug-16","objectID":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/:7:0","tags":["macOs","PnP PowerShell"],"title":"How To Run PnP PowerShell In MacOS","uri":"/2021/08/how-to-run-pn-p-power-shell-in-mac-os/"},{"categories":["SharePoint Online"],"content":"Connecting to SharePoint Online with Azure Function using Certificate-based authentication and PnP Core.","date":"2021-Aug-08","objectID":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/","tags":["Azure Function","SharePoint Online","Azure AD","Certificate Authentication"],"title":"Connect SharePoint Online w/ Azure Function \u0026 Certificates.","uri":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/"},{"categories":["SharePoint Online"],"content":"Introduction In this article, we will understand how we can connect SharePoint Online from Azure Function using Application based authentication. Previously we learned to use Azure Access Control (ACS) where we used to create client id and client secret (from _layouts/15/appregnew.aspx) but this method has been retired and is not recommended to use and hence in the new Tenants, ACS app-only access is disabled by default. So to overcome this we can use Certificate-based Authentication for connection to SharePoint online. In this article, we will divide the sections into two halves, Creating a Certificate that can be used in Azure Active Directory and Azure Function. Using PnP Core to Connecting to SharePoint Online using Azure Function. ","date":"2021-Aug-08","objectID":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/:1:0","tags":["Azure Function","SharePoint Online","Azure AD","Certificate Authentication"],"title":"Connect SharePoint Online w/ Azure Function \u0026 Certificates.","uri":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/"},{"categories":["SharePoint Online"],"content":"Section 1 - Creating Certificate and Azure AD application Let us first understand how we can generate a Certificate for connecting to SharePoint. Step 1 Open PowerShell and run the below command to Install PnP PowerShell, (Please note if you already have PnP PowerShell installed skip this step). Install-Module -Name \"PnP.PowerShell\" Step 2 Once the PnP.PowerShell is Installed we can leverage the command Register-PnPAzureADApp which would help us create a new self-signed certificate that would be linked to an Azure AD application and for the testing purpose it would also be installed to the current user store and hence it is recommended to use the below command with PowerShell running as Administration $CertificatePassword=\"password\" $Tenant=\"testinglala.onmicrosoft.com\" $CertificateOutDir = \".\\Certificates\" if (-not ( Test-Path -Path $CertificateOutDir -PathType Container )) { md $CertificateOutDir } $app = Register-PnPAzureADApp -ApplicationName \"ConnectingToSharePointFromAzureFunction\" -Tenant $Tenant -OutPath $CertificateOutDir ` -CertificatePassword (ConvertTo-SecureString -String $CertificatePassword -AsPlainText -Force) ` -Scopes \"SPO.Sites.FullControl.All\" ` -Store CurrentUser -DeviceLogin Write-Host $app.'AzureAppId/ClientId' Write-Host $app.'Certificate Thumbprint' Please change the value of the password as per our requirement even change the value of the tenant name. (Note - We can even change the scope value as per our requirement as that would add other permission to the Azure AD Application). The output of the above command would be two values as displayed in the image below one is the Azure AD application ID and the other one is the certificate thumbprint. Keep both the values handy as we would require these values to connect to SharePoint online using Certificate. Two important files would be created inside the folder named Certificates which would be, 1) ConnectingToSharePointFromAzureFunction.cer This file is used in the Azure Active Directory Application which we can check by login into our Azure Active Directory and searching for the application with the Client Id obtained from the above PowerShell as displayed in the image below 2) ConnectingToSharePointFromAzureFunction.pfx This file will be used in the Azure Function TLS/SSL Setting which can be uploaded under the Private certificate section we would even require to provide the password which we have set while running the above PowerShell Script ","date":"2021-Aug-08","objectID":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/:2:0","tags":["Azure Function","SharePoint Online","Azure AD","Certificate Authentication"],"title":"Connect SharePoint Online w/ Azure Function \u0026 Certificates.","uri":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/"},{"categories":["SharePoint Online"],"content":"Section 2 - Creating Azure Function and using PnP Core to connect to SharePoint Online Follow the below steps to create an Azure Function, Step 1 Open Visual Studio and Click on Create a new project. Step 2 Select Azure Function as the project type as displayed in the image below, Step 3 Provide appropriate project name and project location and click on Create. Step 4 Select the trigger type for this article. We have to use HTTP trigger but we can leverage any other triggers as well as per our choice. Step 5 - Update the local.settings.json Once the project is created open local.settings.json and update it with the below JSON. Note Please update the value of SiteUrl, TenantId, ClientId, CertificateThumbprint, and WEBSITE_LOAD_CERTIFICATES as per the values obtained from the above PowerShell execution. { \"IsEncrypted\": false, \"Values\": { \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\", \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\", \"SiteUrl\": \"https://testinglala.sharepoint.com/sites/Test\", \"TenantId\": \"52d05dd6-9e21-494f-8502-77658dbe16b8\", \"ClientId\": \"1ee21bec-967f-4801-8aa1-a0ebbf86280d\", \"CertificateThumbPrint\": \"F0..............................\", \"WEBSITE_LOAD_CERTIFICATES\": \"F0...............................\" } } Step 6 - Add required Nuget Package Add below Nuger Packages which would be required for extending the Azure Function and connecting SharePoint Online using PnP Core, Microsoft.Azure.Functions.Extensions PnP.Core.Auth Step 7 Add AzureFunctionSettings.cs file into the Solution which will help us to get all the configuration for the Azure Function and update it with the below code, using System; using System.Collections.Generic; using System.Security.Cryptography.X509Certificates; using System.Text; namespace ConnectSharePointOnline { class AzureFunctionSettings { public string SiteUrl { get; set; } public string TenantId { get; set; } public string ClientId { get; set; } public StoreName CertificateStoreName { get; set; } public StoreLocation CertificateStoreLocation { get; set; } public string CertificateThumbprint { get; set; } } } Step 8 Add a file named Startup.cs which will help us to add DependencyInjection to all the Azure Functions in the solution. Update the Startup.cs file with the below code, using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using PnP.Core.Auth; using System; using System.Collections.Generic; using System.Security.Cryptography.X509Certificates; using System.Text; [assembly: FunctionsStartup(typeof(ConnectSharePointOnline.Startup))] namespace ConnectSharePointOnline { class Startup: FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { var config = builder.GetContext().Configuration; var azureFunctionSettings = new AzureFunctionSettings(); config.Bind(azureFunctionSettings); builder.Services.AddPnPCore(options =\u003e { // Disable telemetry because of mixed versions on AppInsights dependencies options.DisableTelemetry = true; // Configure an authentication provider with certificate (Required for app only) var authProvider = new X509CertificateAuthenticationProvider(azureFunctionSettings.ClientId, azureFunctionSettings.TenantId, StoreName.My, StoreLocation.CurrentUser, azureFunctionSettings.CertificateThumbprint); // And set it as default options.DefaultAuthenticationProvider = authProvider; // Add a default configuration with the site configured in app settings options.Sites.Add(\"Default\", new PnP.Core.Services.Builder.Configuration.PnPCoreSiteOptions { SiteUrl = azureFunctionSettings.SiteUrl, AuthenticationProvider = authProvider }); }); } } } Step 9 Update the Function1.cs file where we can connect to SharePoint Online. For this example purpose we will bring all the documents present in the Shared Documents library. using System; using System.IO; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Microsoft.Azure.WebJobs; using Microsoft.Azure.WebJ","date":"2021-Aug-08","objectID":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/:3:0","tags":["Azure Function","SharePoint Online","Azure AD","Certificate Authentication"],"title":"Connect SharePoint Online w/ Azure Function \u0026 Certificates.","uri":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/"},{"categories":["SharePoint Online"],"content":"Conclusion In this article, we can understand how we can use Application permission to connect to SharePoint online using Certificate-based Authentication in the Azure Active Directory Application. ","date":"2021-Aug-08","objectID":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/:4:0","tags":["Azure Function","SharePoint Online","Azure AD","Certificate Authentication"],"title":"Connect SharePoint Online w/ Azure Function \u0026 Certificates.","uri":"/2021/08/connecting-to-share-point-online-using-certificate-based-authentication-in-azure-function/"},{"categories":["AWS"],"content":"Step-by-step guide to creating an AWS account and utilizing their free tier services, including Amazon S3.","date":"2021-Aug-06","objectID":"/2021/08/creating-free-tier-aws-account-with-free-s-3-storage-account/","tags":["AWS","S3 Storage"],"title":"Creating Free Tier AWS Account With Free S3 Storage Account","uri":"/2021/08/creating-free-tier-aws-account-with-free-s-3-storage-account/"},{"categories":["AWS"],"content":"Introduction In this article, we will go through the step by step process of creating an AWS account and using their free tier services such as Amazon S3. To create a free AWS account follow the below steps, Step 1 Navigate here. Step 2 To check the details of what services are available in the free tier scroll at the bottom which would list all the free services available. Please note that the free services are only allowed for 12 months and are only intended for understanding the AWS services. But this is the best way to learn more about different services provided by AWS. Step 3 Click on Create a Free Account button which would navigate us to a different screen. Step 4 Fill in all the details which are required as displayed in the image below. The complete form contains 5 steps, Step 4.1 In step 1 we are required to provide an email address, password, account, and a security check. Step 4.2 In step 2 we are required to provide the information regarding the usage of the AWS account. For our case, we would select Personal as we are not creating it for any Business but for our training and learning purpose. We would also need to provide our communication details we can use our home address for the same. Step 4.3 In step 3 we are required to provide our credit card details and a nominal charge of INR 2 is deducted from the credit card. Step 4.4 In step 4 we need to verify our mobile phone, we can either use SMS or Call based authentication for the same. In this example, I have used SMS based authentication. Step 4.5 In step 5 we need to select the plan which we would use for example we would use Basic support - Free as we would be using it for our training purpose. Click on complete sign-up to complete the process. Once the process is completed we will get a confirmation message as displayed in the image below, ","date":"2021-Aug-06","objectID":"/2021/08/creating-free-tier-aws-account-with-free-s-3-storage-account/:1:0","tags":["AWS","S3 Storage"],"title":"Creating Free Tier AWS Account With Free S3 Storage Account","uri":"/2021/08/creating-free-tier-aws-account-with-free-s-3-storage-account/"},{"categories":["AWS"],"content":"Free Amazon S3 storage account Let us now create a free Amazon S3 storage account in Free Tier where we would get access to 5GB of standard storage with 20,000 get requests and 2,000 put requests. For creating a free Amazon S3 storage account follow the below steps, Step 1 Navigate here. Step 2 Provide Root user email address which we used to create a free account. Step 3 Search for S3 in the search bar or expand All services and Select S3 under the Storage section. Step 4 Click on Create bucket which would be used to store the data. Step 5 Fill up the details which are required for creating the bucket. As displayed in the image below for the example we have used Asia Pacific(Mumbai) region but we can select any other region as well as per our requirement. Also, we have not used any kind of encryption but we can use it as per our requirement. We can also block public access or provide it as per our requirement but for this example, we have blocked all public access. Step 6 Once the bucket is created we can now create folders or upload files as per our requirement but please note that we can only upload up to 5GB of data. ","date":"2021-Aug-06","objectID":"/2021/08/creating-free-tier-aws-account-with-free-s-3-storage-account/:2:0","tags":["AWS","S3 Storage"],"title":"Creating Free Tier AWS Account With Free S3 Storage Account","uri":"/2021/08/creating-free-tier-aws-account-with-free-s-3-storage-account/"},{"categories":["AWS"],"content":"Conclusion It is very easy to create a free Amazon Web service free account which we can use for learning and training purposes. And to use it as an AWS storage account is also very easy by creating a bucket. With the free account, we can use free services for 12 months but with some restrictions. ","date":"2021-Aug-06","objectID":"/2021/08/creating-free-tier-aws-account-with-free-s-3-storage-account/:3:0","tags":["AWS","S3 Storage"],"title":"Creating Free Tier AWS Account With Free S3 Storage Account","uri":"/2021/08/creating-free-tier-aws-account-with-free-s-3-storage-account/"},{"categories":["SPFx"],"content":"This article shows the basic Markdown syntax and format.","date":"2020-Oct-13","objectID":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/","tags":["SPFx","WebAPI","Azure AD","MSAL.js"],"title":"Create ASP.NET Core API w/ Azure AD Auth \u0026 consume in SPFx.","uri":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/"},{"categories":["SPFx"],"content":"Introduction The practice of creating Custom APIs using ASP.NET core is increasing day by day as ASP.NET core is platform agnostic and is based on the C# language. Securing your API is very important as we do not want everyone to access the data, hence we will explore Azure AD based authentication in ASP.NET Core Web API and consume the API using SharePoint Framework. There are two aspects to this article: Creating ASP.NET Core web API secured using Azure AD Consuming the API in SharePoint Framework Let us first understand how we can create a secure web API. ","date":"2020-Oct-13","objectID":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/:1:0","tags":["SPFx","WebAPI","Azure AD","MSAL.js"],"title":"Create ASP.NET Core API w/ Azure AD Auth \u0026 consume in SPFx.","uri":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/"},{"categories":["SPFx"],"content":"ASP.NET Core Web API To create ASP.NET Core web API we can use .NET Core CLI or Visual Studio. In this article we will use Visual Studio to create a Web API. Open Visual Studio and select Create a New Project. From the available template select ASP.NET Core Web Application as the type of the Project with C# as language Provide the project name as “SecuredWebAPI” and click on create In the next Screen Select API and then change the authentication type from No Authentication to Work or School Accounts. Provide the domain name of your tenant and click on OK login with tenant admin user if not already logged in. Internally when the API gets created there is an Azure AD application which also gets created as displayed in the image below In this Azure AD Application there is another thing called Expose an API which also has an entry with Scope configured. This is created by Visual Studio itself for our convenience. We need to update the code in startup.cs so that it will accept a valid audience and valid Issuers. To do that update the below code in ConfigureServices method, comment the services.AddAuthentication line and replace it with the below code which will include valid audience and valid Issuers. We will also enable CORS as we will be consuming the Web API in SharePoint which would have a different domain. services.AddCors(); services.AddAuthentication(sharedoptions =\u003e { sharedoptions.DefaultScheme = JwtBearerDefaults.AuthenticationScheme; }).AddJwtBearer(options =\u003e { options.Authority = \"https://login.microsoftonline.com/52d05dd6-9e21-494f-8502-77658dbe16b8\"; options.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters { ValidAudiences = new List\u003cstring\u003e { \"https://testinglala.onmicrosoft.com/SecuredWebAPI\" }, // set the following issuers if you want to support both V1 and V2 issuers ValidIssuers = new List\u003cstring\u003e { \"https://sts.windows.net/52d05dd6-9e21-494f-8502-77658dbe16b8/\",\"https://login.microsoftonline.com/52d05dd6-9e21-494f-8502-77658dbe16b8/v2.0\" } }; }); Now let us start the web API and test it in Postman to check whether it is authenticating or not. As displayed in the image the API provides us 401 Unauthorized as the output code ","date":"2020-Oct-13","objectID":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/:2:0","tags":["SPFx","WebAPI","Azure AD","MSAL.js"],"title":"Create ASP.NET Core API w/ Azure AD Auth \u0026 consume in SPFx.","uri":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/"},{"categories":["SPFx"],"content":"Consume the web API using SPFx To consume the web API in SPFx let us first create an SPFx solution. Use the below code in Node.js command prompt to create SPFx solution. md callSecuredAPIGraph cd callSecuredAPIGraph yo @microsoft/sharepoint Select the below answers when prompted with questions as displayed in the image below. We will use MSAL.js to fetch the token and use that token to call our web API. This token would be a bearer token so let us add the dependency of MSAL.js using the below command. npm install msal --save Now update the below code in the WebPart.ts file. Import the reference to MSAL.js using the below code: import \\* as Msal from 'msal'; Add the below variable as constants as we will not update those (Please update the clientId, authority and redirectUri as per your tenant and application id in azure ad and tenant Id): const msalConfig = { auth: { clientId: '914a7422-244b-4684-9e47-6f020d014967', authority: \"https://login.microsoftonline.com/52d05dd6-9e21-494f-8502-77658dbe16b8\", redirectUri: 'https://testinglala.sharepoint.com/\\_layouts/15/workbench.aspx' } }; const msalObj = new Msal.UserAgentApplication(msalConfig); Now let us add the below code to fetch the token. We will fetch this before our code gets rendered update the render method with the below code: public render(): void { msalObj.handleRedirectCallback(error1 =\u003e { console.log(error1); }); if (!msalObj.getAccount()) { msalObj.loginRedirect({ scopes: \\[\"https://testinglala.onmicrosoft.com/AzureADCoreAPI/user\\_impersonation\"\\] }); } else { msalObj.acquireTokenPopup({ scopes: \\[\"https://testinglala.onmicrosoft.com/AzureADCoreAPI/user\\_impersonation\"\\] }).then((val) =\u003e { console.log(val); const element: React.ReactElement \u003c ICallSecuredApiProps \u003e = React.createElement(CallSecuredApi, { description: this.properties.description, context: this.context, accessToken: val.accessToken }); ReactDom.render(element, this.domElement); }).catch((error) =\u003e { console.log(error); }); } } To fetch the data from Web API let us update our CallSecuredApi.tsx file. Add a state variable response and initialize it with empty array and add below method which would fetch the API data: public componentDidMount() { this.props.context.httpClient.get('https://localhost:44364/api/values', HttpClient.configurations.v1, { headers: { 'Authorization': \\`Bearer ${this.props.accessToken}\\` }, method: 'GET' }).then((response: HttpClientResponse) =\u003e { response.json().then((val) =\u003e { console.log(val); this.setState({ response: val }); }).catch((erro) =\u003e { console.log(erro); }); }).catch((error) =\u003e { console.log(error); }); } Update the render method with the below code to display the obtained data from the web API. public render(): React.ReactElement \u003cICallSecuredApiProps\u003e { return ( \u003cdiv className={styles.callSecuredApi}\u003e \u003cdiv className={styles.container}\u003e \u003cdiv className={styles.row}\u003e \u003cdiv className={styles.column}\u003e \u003cspan className={styles.title}\u003eWelcome to SharePoint!\u003c/span\u003e {this.state.response \u0026\u0026 this.state.response.map((val) =\u003e { return ( \u003cdiv\u003e{val}\u003c/div\u003e); })} \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e ); } Now we can start our SPFx solution using the below code gulp serve Outcome ","date":"2020-Oct-13","objectID":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/:3:0","tags":["SPFx","WebAPI","Azure AD","MSAL.js"],"title":"Create ASP.NET Core API w/ Azure AD Auth \u0026 consume in SPFx.","uri":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/"},{"categories":["SPFx"],"content":"Conclusion Securing Web API in ASP.NET core is very easy and consuming it in SPFx using MSAL.js gives us a good opportunity to create an end to end solution for enterprise which is scalable. We can leverage ASP.NET core API which can help us to create robust Web API for our desired application. Happy Codding !!! ","date":"2020-Oct-13","objectID":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/:4:0","tags":["SPFx","WebAPI","Azure AD","MSAL.js"],"title":"Create ASP.NET Core API w/ Azure AD Auth \u0026 consume in SPFx.","uri":"/2020/10/create-asp-net-core-api-w-azure-ad-auth-consume-in-sp-fx/"},{"categories":["Microsoft Teams"],"content":"Step-by-step guide to creating an Outgoing Webhook in MS Teams using Yeoman Teams generator.","date":"2020-Oct-12","objectID":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/","tags":["outgoing webhook teams","yo teams"],"title":"Outgoing Web Hook In Teams Using Yeoman Teams Generator","uri":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Introduction This article will help us understand Outgoing Webhook in MS Teams, and is a step by step guid for creating outgoing webhook using yeoman teams generator. Outgoing Webhook in MS Teams acts like a bot which can be triggered from channel using @mention, web hook can receive messages posted along with the @mention and can send reply based on the incoming message. In this article we will focus on creating Outgoing web hook using yeoman generator and use it in MS Teams. Note Outgoing webhooks are scoped at the team level. ","date":"2020-Oct-12","objectID":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/:1:0","tags":["outgoing webhook teams","yo teams"],"title":"Outgoing Web Hook In Teams Using Yeoman Teams Generator","uri":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Setup Environment for Yeoman Teams Generator Install Latest version of Nodejs or we can use nvm if we require multiple versions of node js. To check the complete installation guide check my blog here. Install yeoman and gulp cli npm install yo gulp-cli --global Install Microsoft teams app generator npm install generator-teams --global ","date":"2020-Oct-12","objectID":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/:2:0","tags":["outgoing webhook teams","yo teams"],"title":"Outgoing Web Hook In Teams Using Yeoman Teams Generator","uri":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Create Outgoing Webhook using yeoman Teams generator To create the solution we need to use the below command and provide below parameters which will help in creating the solution mkdir webhookwithYeoman cd webhookwithYeoman yo teams Now let us open the code and check the project structure. The main folder which we need to concentrate is src folder; inside src we have two folders app and manifest. The app folder contains the code and manifest folder contains all the necessary files required for deployment in MS Teams Our code for outgoing web hook will be present inside the folder messagesOutgoingWebhook with the file named message.ts. This will depend on the name of the web hook which you have provided. If we check the code we can understand it is a simple echo bot which would send the same message which is received in the request import \\* as builder from \"botbuilder\"; import \\* as express from \"express\"; import \\* as crypto from \"crypto\"; import { OutgoingWebhookDeclaration, IOutgoingWebhook } from \"express-msteams-host\"; @OutgoingWebhookDeclaration(\"/api/webhook\") export class Messages implements IOutgoingWebhook { public constructor() { } public requestHandler(req: express.Request, res: express.Response, next: express.NextFunction) { // parse the incoming message const incoming = req.body as builder.Activity; // create the response, any Teams compatible responses can be used const message: Partial\u003cbuilder.Activity\u003e = { type: builder.ActivityTypes.Message }; const securityToken = process.env.SECURITY\\_TOKEN; if (securityToken \u0026\u0026 securityToken.length \u003e 0) { // There is a configured security token const auth = req.headers.authorization; const msgBuf = Buffer.from((req as any).rawBody, \"utf8\"); const msgHash = \"HMAC \" + crypto. createHmac(\"sha256\", Buffer.from(securityToken as string, \"base64\")). update(msgBuf). digest(\"base64\"); if (msgHash === auth) { // Message was ok and verified message.text = \\`Echo ${incoming.text}\\`; } else { // Message could not be verified message.text = \\`Error: message sender cannot be verified\\`; } } else { // There is no configured security token message.text = \\`Error: outgoing webhook is not configured with a security token\\`; } // send the message res.send(JSON.stringify(message)); } } From the above code we can understand that we are using crypto to decrypt the message and obtain the hash and we will compare this hash which will be provided from MS Teams when we register our Webhook. Let us run the application using the below command gulp ngrok-serve This will provide us with a dummy domain which we can use as a call back URL in our application. As displayed in the image HOSTNAME is 0b0294fab980.ngrok.io, hence my Callback URL would be https://0b0294fab980.ngrok.io/api/webhook Now let us add Webhook in our Teams channel and obtain the security token. Step 1 Click on More options(…) on Teams Step 2 On the fly out menu select “Manage Team” Step 3 Select the Apps Tab in Manage Teams section and click on Create an outgoing webhook Step 4 Fill in the form with appropriate data Name - This name would be used in @mention name Callback URL - The URL copied from above (https://0b0294fab980.ngrok.io/api/webhook) Description - This would be used for describing the outgoing webhook Step 5 Once we click on create we will get an access token which will be used for authenticating the data. Copy the code and add it in the .env file where the variable name is SECURITY_TOKEN. Once we update this value restart gulp ngrok-serve and update the domain in the web hook by following step 1 and step 2 and then select the Apps Tab and click on the web hook which is already added and update the callback URL with the new domain name Outcome ","date":"2020-Oct-12","objectID":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/:3:0","tags":["outgoing webhook teams","yo teams"],"title":"Outgoing Web Hook In Teams Using Yeoman Teams Generator","uri":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Conclusion Creating outgoing webhook with yeoman teams generator is very easy and we can use bots as well and can even use them to send interactive messages using adaptive cards. This can be very helpful when we do not want to create a dedicated bot but would need a less intense task which does not take much time. Happy coding !!! ","date":"2020-Oct-12","objectID":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/:4:0","tags":["outgoing webhook teams","yo teams"],"title":"Outgoing Web Hook In Teams Using Yeoman Teams Generator","uri":"/2020/10/outgoing-web-hook-in-teams-using-yeoman-teams-generator/"},{"categories":["SPFx"],"content":"Working with timezones in SharePoint Framework (SPFx) using Moment Timezone and jstz.","date":"2020-Sep-21","objectID":"/2020/09/working-with-timezone-in-sp-fx/","tags":["SharePoint Online","SPFx","Moment","jstz"],"title":"Working With Timezone In SPFx","uri":"/2020/09/working-with-timezone-in-sp-fx/"},{"categories":["SPFx"],"content":"Introduction While designing applications, we may come across multiple scenarios where our application could run across multiple locations and timezones, and working with all these timezones could be a difficult task. With the introduction of SharePoint framework, creating a scalable and UI friendly application is very easy. With modern SharePoint, creating an Intelligent intranet is very easy and is becoming popular. There can be a scenario where intranet users are across multiple locations, therefore we need to create an SPFx solution considering all these locations. We will use Moment Timezone to get all the timezones and work with conversions of the timezone. To get the current user’s timezone, we will use jstz to fetch the current users’ timezone. Before diving into the SPFx solution, let us understand how SharePoint works with timezones out of the box ","date":"2020-Sep-21","objectID":"/2020/09/working-with-timezone-in-sp-fx/:1:0","tags":["SharePoint Online","SPFx","Moment","jstz"],"title":"Working With Timezone In SPFx","uri":"/2020/09/working-with-timezone-in-sp-fx/"},{"categories":["SPFx"],"content":"How SharePoint stores date and time field Out of the box, SharePoint Converts the date and time field in the regional setting of the site. To understand this let’s see an example: Let’s create a sample list name Learning DateTime. Add a new field named SampleDateTime where we would also store time values. Check the regional setting of the site collection to check that navigate to site setting and select the regional setting, as displayed in the image below: Check the regional setting time zone value. So, if a User say for example is creating a new item in the list, the date and time value will be converted as per the regional setting and would be stored in the ISO format in the list. Let’s create a new item in the list and check what is the value that is being stored in the list. As displayed in the image below, we have selected 8 am as the time, but when we fetch the data, it provides the time as (15), which is 3 pm. This means it has added 7 hours to our selected time, which is because of the timezone difference. ","date":"2020-Sep-21","objectID":"/2020/09/working-with-timezone-in-sp-fx/:2:0","tags":["SharePoint Online","SPFx","Moment","jstz"],"title":"Working With Timezone In SPFx","uri":"/2020/09/working-with-timezone-in-sp-fx/"},{"categories":["SPFx"],"content":"How to store data in SharePoint List without conversion To store the date-time without converting to site collection regional setting, we can pass the date and time in the iso format using the REST API and this will not convert our entered data in the regional setting URL:- https://testinglala.sharepoint.com/sites/Test/_api/web/lists/getbytitle(‘Learning datetime’)/items?$select=Title,SampleDateTime Data:- {Title:‘Test POST’,SampleDateTime:“2020-09-20T15:30:00Z”,\"__metadata\": {“type”: “SP.Data.Learning_x0020_datetimeListItem”} } ","date":"2020-Sep-21","objectID":"/2020/09/working-with-timezone-in-sp-fx/:3:0","tags":["SharePoint Online","SPFx","Moment","jstz"],"title":"Working With Timezone In SPFx","uri":"/2020/09/working-with-timezone-in-sp-fx/"},{"categories":["SPFx"],"content":"Create an SPFx Solution to handle different timezone To create an SPFx solution, let’s run the below command and follow the steps as displayed in the below image. mkdir timezones cd timezones yo @microsoft/sharepoint We will also add the required library which would be helpful for our solution and understanding. Use the below command to add those: PnP js PnP reusable controls moment timezone jstz npm i @pnp/js @pnp/spfx-controls-react moment-timezone jstz - -save - -save-exact Now, let’s create a dropdown that would display all the Timezones and users can select the timezone of their choice. To do so, let’s update the MultipleTimezone.tsx file. Add the below import statement in the file at the top of the file along with all the imports. import { PrimaryButton, values } from 'office-ui-fabric-react'; import { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown'; import { DateTimePicker, DateConvention, TimeConvention, TimeDisplayControlType } from '@pnp/spfx-controls-react/lib/dateTimePicker'; import \\* as moment from \"moment-timezone\"; import \\* as jstz from \"jstz\"; import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; Now we will use moment.tz.names() which provides us all the timezone names. We will manipulate it to get the offset for all the time zones. Add the below code in the next line after all the import statements are completed. const selectorOptions = moment.tz.names().reduce((memo, tz) =\u003e { memo.push({ name: tz, offset: moment.tz(tz).utcOffset() }); return memo; }, \\[\\]).sort((a, b) =\u003e { return a.offset - b.offset; }).reduce((memo, tz) =\u003e { const timezone = tz.offset ? moment.tz(tz.name).format('Z') : ''; return memo.concat(\\`{\"key\":\"${tz.name}\", \"text\":\"(GMT${timezone}) ${tz.name}\"},\\`); }, \"\"); const timeZoneOptions = JSON.parse(\\`\\[${selectorOptions.substring(0, selectorOptions.length - 1)}\\]\\`); As we can see from the above code, we created a JSON object of key and text pair which is compatible with office UI fabric dropdown so we will use the timeZoneOptions variable for all the dropdown options. Now to add the actual office UI fabric dropdown, let’s remove the HTML provided in the render method and replace it with the below code. \u003cdiv className={styles.multipleTimeZone}\u003e \u003cdiv className={styles.container}\u003e \u003cdiv className={styles.row}\u003e \u003cDropdown placeholder=\"Select Timezone\" label=\"Select Timezone\" options={timeZoneOptions} selectedKey={this.state.selectedTimeZone ? this.state.selectedTimeZone.key : undefined} onChange={(event: React.FormEvent \u003cHTMLDivElement\u003e, item: IDropdownOption)=\u003e{this.setState({ selectedTimeZone: item });}} /\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e We are even storing the timezone selection value, so let’s add the state interface and initialize it in the constructor. To do so, add the below interface. It contains additional values as well, which we would use it ahead in our implementation. export interface IMultipleTimeZoneState { date: Date; dateToStore: string; selectedTimeZone: IDropdownOption; allItems: any; } constructor(props: IMultipleTimeZoneProps) { super(props); this.state = { date: undefined, dateToStore: undefined, selectedTimeZone: undefined, allItems: \\[\\] }; } Now let’s add a date time picker that would help us select date and time. We can use any datetimepicker, but for out article, we have to use pnp reuseable control datetime picker. Update the render method and add the below code: \u003cDateTimePicker label=\"Select Date\" dateConvention={DateConvention.DateTime} timeConvention={TimeConvention.Hours24} value={this.state.date} onChange={this.handleChange} timeDisplayControlType={TimeDisplayControlType.Dropdown} /\u003e Let’s also add the supporting method used in the datetimepicker: private handleChange = (date: Date) =\u003e { let dateToStore = moment(date).tz(jstz.determine().name()).format('YYYY-MM-DDTHH:mm:ss').concat('Z'); this.setState({ date: date, dateToStore: dateToStore }); } The real magic happens over here, as we can observe from ","date":"2020-Sep-21","objectID":"/2020/09/working-with-timezone-in-sp-fx/:4:0","tags":["SharePoint Online","SPFx","Moment","jstz"],"title":"Working With Timezone In SPFx","uri":"/2020/09/working-with-timezone-in-sp-fx/"},{"categories":["SPFx"],"content":"Conclusion By using moment timezone and jstz, it becomes very easy to work with timezone in SharePoint. I hope this will help to create a solution where multiple timezones are required. This can even help where we don’t want SharePoint to convert the time as per the value of the regional setting. ","date":"2020-Sep-21","objectID":"/2020/09/working-with-timezone-in-sp-fx/:5:0","tags":["SharePoint Online","SPFx","Moment","jstz"],"title":"Working With Timezone In SPFx","uri":"/2020/09/working-with-timezone-in-sp-fx/"},{"categories":["SPFx"],"content":"Understanding the different types of components in React and their usage.","date":"2020-Aug-31","objectID":"/2020/08/function-and-class-component-in-react-with-sp-fx/","tags":["SPFx","SharePoint Online","React"],"title":"Function And Class Component In React With SPFx","uri":"/2020/08/function-and-class-component-in-react-with-sp-fx/"},{"categories":["SPFx"],"content":"Introduction In this article, we will learn the different types of components that we can create in React We will also learn which should be used in which conditions. React provides us two different types of components: Function component Class component React documentation for different components can be found in the below link. ","date":"2020-Aug-31","objectID":"/2020/08/function-and-class-component-in-react-with-sp-fx/:1:0","tags":["SPFx","SharePoint Online","React"],"title":"Function And Class Component In React With SPFx","uri":"/2020/08/function-and-class-component-in-react-with-sp-fx/"},{"categories":["SPFx"],"content":"Difference Function component In the syntax point of view, we do not write class for function component rather we create it as a function It only accepts props as an argument We can not use state with functional component i.e. setState() and hence functional component are also known as stateless components In the Functional component, we can not use Lifecycle Hooks. Class component In syntax point of view, we write a class which inherits from React.component It accepts both props as well as state We can use state and hence it is also known as stateful components In class component, we can use Lifecycle Hooks like componentDidMount, the component will unmount ","date":"2020-Aug-31","objectID":"/2020/08/function-and-class-component-in-react-with-sp-fx/:2:0","tags":["SPFx","SharePoint Online","React"],"title":"Function And Class Component In React With SPFx","uri":"/2020/08/function-and-class-component-in-react-with-sp-fx/"},{"categories":["SPFx"],"content":"Benefits Benefits functional component As we cannot use lifecycle-hooks and state, it is easy to read and test a functional component We end up writing less code and hence it is easy to read and understand Performance boosting We can use State Hook for storing local data to the component Benefits class component If we want to control the lifecycle of the component we should use class component We can store local data in the state which can be used in the component It keeps tracks in changes to the data in the state, and reacts if there is any change in it ","date":"2020-Aug-31","objectID":"/2020/08/function-and-class-component-in-react-with-sp-fx/:3:0","tags":["SPFx","SharePoint Online","React"],"title":"Function And Class Component In React With SPFx","uri":"/2020/08/function-and-class-component-in-react-with-sp-fx/"},{"categories":["SPFx"],"content":"How to use in SharePoint Framework (SPFx) For SPFx, let’s create a new solution for SPFx using the below command (Assuming the development environment is set up for SPFx) mkdir reactComponents cd reactComponents yo @microsoft/sharepoint Select different values which are asked while creating the solution, as mentioned below: Let’s open the code in Visual studio code and create functional and class components in SPFx Note By default, the component which is created for the web part is a class component ","date":"2020-Aug-31","objectID":"/2020/08/function-and-class-component-in-react-with-sp-fx/:4:0","tags":["SPFx","SharePoint Online","React"],"title":"Function And Class Component In React With SPFx","uri":"/2020/08/function-and-class-component-in-react-with-sp-fx/"},{"categories":["SPFx"],"content":"How to create a functional component in SPFx Open the file present in the solution in the below path src -\u003e web parts -\u003e understandComponent -\u003e components Now to create a functional component, we can add below code in UnderstandComponent.tsx: export interface IUnderstandFunctionComponentProps { title: string; } export const UnderstandFunctionComponent: React.FunctionComponent\u003cIUnderstandFunctionComponentProps\u003e = (props: IUnderstandFunctionComponentProps) =\u003e { return ( \u003ch1\u003e{props.title}\u003c/h1\u003e ); }; As we can see in the above code, we are not creating a class, rather it is just a function in typescript which has a type as React.FunctionComponent In this component, we are accepting the title as a parameter and displaying it with tag. ","date":"2020-Aug-31","objectID":"/2020/08/function-and-class-component-in-react-with-sp-fx/:5:0","tags":["SPFx","SharePoint Online","React"],"title":"Function And Class Component In React With SPFx","uri":"/2020/08/function-and-class-component-in-react-with-sp-fx/"},{"categories":["SPFx"],"content":"How to create a class component in SPFx Now to create a class component, we can add below code in UnderstandComponent.tsx: export interface IUnderstandStateComponentProps { title: string; } export interface IUnderstandStateComponentState { count: number; } class UnderstandStateComponent extends React.Component \u003cIUnderstandStateComponentProps, IUnderstandStateComponentState\u003e { constructor(props: IUnderstandStateComponentProps) { super(props); this.state = { count: 0 }; } public render(): React.ReactElement \u003cIUnderstandStateComponentProps\u003e { return ( \u003cdiv\u003e \u003ch1\u003e{this.props.title}\u003c/h1\u003e \u003cdiv\u003e{this.state.count}\u003c/div\u003e \u003cbutton onClick={() =\u003e this.setState({ count: this.state.count + 1 })}\u003eAdd\u003c/button\u003e \u003c/div\u003e ); } } From the above code, we can understand that we have created a class named UnderstandStateComponent which is inheriting from React.Component In this component, we are using the title as property and count as a state and this count would increase on click on the Add button. We can use constructor as this is not a function but a class. ","date":"2020-Aug-31","objectID":"/2020/08/function-and-class-component-in-react-with-sp-fx/:6:0","tags":["SPFx","SharePoint Online","React"],"title":"Function And Class Component In React With SPFx","uri":"/2020/08/function-and-class-component-in-react-with-sp-fx/"},{"categories":["SPFx"],"content":"How to use it and render the component Using function or class component has the same syntax and is very easy to use we can update the render method in our component with the below code: export default class UnderstandComponent extends React.Component \u003cIUnderstandComponentProps, {}\u003e { public render(): React.ReactElement \u003cIUnderstandComponentProps\u003e { return ( \u003cdiv className={styles.understandComponent}\u003e \u003cdiv className={styles.container}\u003e \u003cdiv className={styles.row}\u003e \u003cUnderstandFunctionComponent title=\"This is a function component\"\\\u003e\u003c/UnderstandFunctionComponent\u003e \u003cUnderstandStateComponent title=\"This is a class compoent\"\\\u003e\u003c/UnderstandStateComponent\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e ); } } As we can see from the above code, we are using both the component in a similar manner and we are passing the props value also in a similar manner hence in terms of component rendering both are similar. Outcome ","date":"2020-Aug-31","objectID":"/2020/08/function-and-class-component-in-react-with-sp-fx/:7:0","tags":["SPFx","SharePoint Online","React"],"title":"Function And Class Component In React With SPFx","uri":"/2020/08/function-and-class-component-in-react-with-sp-fx/"},{"categories":["SPFx"],"content":"Conclusion Hence, we should use the function component when we want to use it as a presentation component, which does not store any data value but only displays as per the values passed in the property. If we want to store data, we should use class component, which helps us have all lifecycle hooks ","date":"2020-Aug-31","objectID":"/2020/08/function-and-class-component-in-react-with-sp-fx/:8:0","tags":["SPFx","SharePoint Online","React"],"title":"Function And Class Component In React With SPFx","uri":"/2020/08/function-and-class-component-in-react-with-sp-fx/"},{"categories":["SPFx"],"content":"Using Microsoft Graph API to update profile picture for all Microsoft 365 applications via SPFx webpart.","date":"2020-Aug-11","objectID":"/2020/08/update-profile-picture-using-graph-api-in-sp-fx/","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Update Profile Picture Using Graph API In SPFx","uri":"/2020/08/update-profile-picture-using-graph-api-in-sp-fx/"},{"categories":["SPFx"],"content":"Introduction Microsoft 365 has a different application in its suite. To combine all these data for developers Microsoft came up with Graph API. This has helped developers to access data across applications in Microsoft 365. One such example which we would leverage today is to save profile picture which would reflect across all the applications in Microsoft 365. In this article, we will create a SPFx webpart where user can select their profile picture and on click of the save button, the profile picture will be updated for all apps in Microsoft 365. Step 1 - Create a SPFx Solution To create SPFx solution, use the below command: yo @microsoft/sharepoint Provide values for different questions which are asked while creating the solution as displayed in the image below: Step 2 - Install fluent UI To use the icon for the file selection and deleting the file, we use the fluent UI icon. Use the below command to install it. npm install @fluentui/react --save Step 3 - Add Graph API Scopes Open the solution in your choice of code editor. Open the file name package-solution.json which would be present inside the config folder. Add the below code after the line “isDomainIsolated”: true: \"webApiPermissionRequests\": [ { \"resource\": \"Microsoft Graph\", \"scope\": \"User.ReadWrite\" } ] Step 4 - Add the Code for Uploading the Image as a Profile Picture To start updating the code, we are required to access context in our component. To do so, we need to update two files: UpdateProfilePictureWebPart.ts IUpdateProfilePictureProps.ts Below is the code update that we need to do in the above-mentioned files: In IUpdateProfilePictureProps.ts, replace the below code in the file: import { WebPartContext } from \"@microsoft/sp-webpart-base\"; export interface IUpdateProfilePictureProps { description: string; context:WebPartContext; } In UpdateProfilePictureWebPart.ts, update the render method pass additional parameter named context to UpdateProfilePicture component. Hence, the final render method will look as mentioned below: public render(): void { const element: React.ReactElement \u003c IUpdateProfilePictureProps \u003e = React.createElement(UpdateProfilePicture, { description: this.properties.description, context: this.context }); ReactDom.render(element, this.domElement); } Now let us update the component. To update the component, we need to update the file named UpdateProfilePicture.tsx. Replace it with the below code. In the below code we are using: HTML file picker which is hidden but is called in click on the icon button On Selection of the file, we would display a delete icon and display the selected image as with the help of URL.createObjectURL() which would help us get the blob value of the file On a click of “Save as Profile Picture,” we are uploading the file with the help of MSGraphClient For displaying a success or error message in the dialog box: import * as React from 'react'; import styles from './UpdateProfilePicture.module.scss'; import { IUpdateProfilePictureProps } from './IUpdateProfilePictureProps'; import { IconButton, PrimaryButton } from '@fluentui/react/lib/Button'; import { MSGraphClient } from \"@microsoft/sp-http\"; import { Dialog, DialogFooter } from 'office-ui-fabric-react/lib/Dialog'; export interface IUpdateProfilePictureState { imageFile: FileList; open: boolean; savedMessage: string; savedMessageTitle: string; } export default class UpdateProfilePicture extends React.Component\u003cIUpdateProfilePictureProps, IUpdateProfilePictureState\u003e { constructor(props: IUpdateProfilePictureProps) { super(props); this.state = { imageFile: null, open: true, savedMessage: \"\", savedMessageTitle: \"\", }; } private saveAsProfile = () =\u003e { var reader = new FileReader(); var tempfile = this.state.imageFile[0]; this.props.context.msGraphClientFactory .getClient().then((client: MSGraphClient) =\u003e { client .api(\"me/photo/$value\") .version(\"v1.0\").header(\"Content-Type\", tempfile.type).put(tempfile, (err, res) =\u003e { if (!err) { this.setState({ open: false, savedMessa","date":"2020-Aug-11","objectID":"/2020/08/update-profile-picture-using-graph-api-in-sp-fx/:1:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Update Profile Picture Using Graph API In SPFx","uri":"/2020/08/update-profile-picture-using-graph-api-in-sp-fx/"},{"categories":["SPFx"],"content":"Conclusion To update images across all the applications in Microsoft 365, graph API comes to rescue and we can create an a SPFx webpart which can be accessed by all the users in the organization and update their profile picture. ","date":"2020-Aug-11","objectID":"/2020/08/update-profile-picture-using-graph-api-in-sp-fx/:2:0","tags":["Teams Tab","TeamsFx","Teams Toolkit"],"title":"Update Profile Picture Using Graph API In SPFx","uri":"/2020/08/update-profile-picture-using-graph-api-in-sp-fx/"},{"categories":["SPFx"],"content":"Using PnPJs in SPFx to fetch cross-site collection data from SharePoint Online.","date":"2020-Aug-03","objectID":"/2020/08/fetch-share-point-online-list-items-from-another-site-collection-using-pn-p-js/","tags":["SPFx","SharePoint Online","PnP Js"],"title":"Fetch SP list items from another site using PnP JS.","uri":"/2020/08/fetch-share-point-online-list-items-from-another-site-collection-using-pn-p-js/"},{"categories":["SPFx"],"content":"Introduction SharePoint Online has gained more popularity with the release of REST API and SPFx. Data operation becomes easy in Client-Side Solution with the help of REST API. All these APIs work under current user permission and there could be a scenario that current users can have access to multiple site collection and we would need to fetch data for cross-site collection. How we can fetch cross-site collection data is a question, but with the help of PnPJs this question can be easily solved. Let us look at how we can fetch cross-site collection data using PnPJs in SPFx. I hope that your environment for SPFx is up and running. Step 1 - Create SPFx Solution Using the below command we can create an SPFx solution mkdir dataFromOtherSC cd dataFromOtherSC yo @microsoft/sharepoint Use the below values when asked for. We will be using React as our front end framework for creating out SPFx webpart. Step 2 - Add Reference to PnPJs To add a reference to PnPJs use the below command. npm install @pnp/sp —save Once the reference is installed we can start the setup. To establish context open the file named: DataFromOtherScWebPart.ts Import the reference to PnPJs. To do so add the below line: import { sp } from \"@pnp/sp/presets/all\"; Once the import statement is added we can add the below method to establish context protected onInit(): Promise \u003c void \u003e { return super.onInit().then(_ =\u003e { sp.setup({ spfxContext: this.context }); }); } Step 3 - Fetch data from other site collection or subsite: To fetch the data from other site collections we need to created the object of the web. To do so let us update our DataFromOtherSc.tsx file. Import the below reference in the file: import { Web } from \"@pnp/sp/webs\"; Create an interface for the state use the below code export interface IDataFromOtherScState { listItems: any; } Now to initiate the object of the web for our required site collection use the below code. This will create a variable which can be accessed in the class. We can provide site collection or subsite URL from where we need to fetch the data. private web = Web(\"https://testinglala.sharepoint.com/sites/Test/\"); To fetch the data from a list of other site collections we can use the below code in componentDidMount method. public componentDidMount = () =\u003e { this.web.lists.getByTitle(\"Employee\").items().then((items) =\u003e { this.setState({ listItems: items }); }).catch((err) =\u003e { console.log(err); }); } Now to access any of the objects for other site collections or subsite we can use the reference of the web. Note This would work with the current user credentials. If the user does not have access then they will not be able to fetch data. Outcome ","date":"2020-Aug-03","objectID":"/2020/08/fetch-share-point-online-list-items-from-another-site-collection-using-pn-p-js/:1:0","tags":["SPFx","SharePoint Online","PnP Js"],"title":"Fetch SP list items from another site using PnP JS.","uri":"/2020/08/fetch-share-point-online-list-items-from-another-site-collection-using-pn-p-js/"},{"categories":["SPFx"],"content":"Conclusion Using PnPJs it is very easy to fetch data across any site collection with the help of web object and this can help give the user a seamless experience for their data across site collections without authenticating again. ","date":"2020-Aug-03","objectID":"/2020/08/fetch-share-point-online-list-items-from-another-site-collection-using-pn-p-js/:2:0","tags":["SPFx","SharePoint Online","PnP Js"],"title":"Fetch SP list items from another site using PnP JS.","uri":"/2020/08/fetch-share-point-online-list-items-from-another-site-collection-using-pn-p-js/"},{"categories":["SPFx"],"content":"Learn how to use react-quill control to customize rich text fields in Modern SharePoint List Forms, based on Quill and trusted by Microsoft.","date":"2020-Jul-22","objectID":"/2020/07/create-rich-text-control-w-image-and-video-in-sp-fx/","tags":["SPFx","SharePoint Online","React-Quill"],"title":"Create Rich Text control w/ image and video in SPFx.","uri":"/2020/07/create-rich-text-control-w-image-and-video-in-sp-fx/"},{"categories":["SPFx"],"content":"Introduction Rich Text Control is one of the most-used controls in classic SharePoint Lists but if we need to create a customization for Modern SharePoint List form using SharePoint Framework there is no easy way to do so. But in this article, we will understand how we can use react-quill control to save the rich text field and also display it for the existing items. react-quill is based on Quill which is trusted by Microsoft. To know more about the react-quill control please check the below link. So let us understand how we can use react-quill in our Custom SharePoint List Form. Step 1 - Create a List Before creating a Custom form we would create a SharePoint list for saving the data. List Name:- Custom RichText Columns:- Title(Single Line of Text) Description(Multi-Line of Text in Plain Text format) Note We are using Plain Text but we will save the HTML in it because the images in React quill will be converted in base64 and will get truncated in Rich Text format. Step 2 - Create SPFx Solution Considering we have the environment setup completed we can use the below command to create new SPFx solution. We will use React framework for creating the Webpart yo @microsoft/sharepoint Use the below values when asked while creating the solution. Step 3 - Add the reference for react-quill To add a reference to React quill in our project we need to use the below command which would install the required dependencies in our solution. npm install react-quill --save Saving the data we would use PnPJs so let us install the required dependencies for PnPJs. npm install @pnp/sp --save Step 4 - Update the WebPart Code Now that we have all the dependencies added in our solution we can update the code. Let us set up the sp object so that we can use it to save the list item and retrieve it. Open the file name named RichTextFieldWebPart.ts. Import sp using the below code. import { sp } from \"@pnp/sp/presets/all\"; And add the below function to setup sp object. protected onInit(): Promise\u003cvoid\u003e { return super.onInit().then(_ =\u003e { sp.setup({ spfxContext: this.context }); }); } Open the file named RichTextField.tsx to update the code for the rich text field. Let us add the required reference for React quill using the below code. import ReactQuill from 'react-quill'; import 'react-quill/dist/quill.snow.css'; Let us now create and add required interfaces. export interface ICustomRichText { Title: string; Description: string; } export interface IRichTextFieldWebPartState { item: ICustomRichText; } Now for using react quill we can use custom toolbar so we would add all the required toolbar using the below constant: const modules = { toolbar: [ [{ 'header': [1, 2, 3, false] }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{ 'color': [] }, { 'background': [] }], [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'indent': '-1' }, { 'indent': '+1' }], ['link', 'image', 'video'], ['clean'] ], }; const formats = ['header', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'indent', 'link', 'image', 'video', 'background', 'color']; Now in the render method of the component, we will have to add the below code which contains one text field and one React quill text editor: \u003cdiv className={styles.column}\u003e \u003cdiv\u003eTitle\u003c/div\u003e \u003cinput type=\"text\" value={this.state.item.Title} onChange={(ev) =\u003e { this.setState({ item: { Title: ev.target.value, Description: this.state.item.Description } }); }}\u003e\u003c/input\u003e \u003c/div\u003e \u003cdiv className={styles.column}\u003e \u003cdiv\u003eDescription\u003c/div\u003e \u003cReactQuill theme=\"snow\" modules={modules} formats={formats} value={this.state.item.Description} onChange={(ev) =\u003e { this.setState({ item: { Title: this.state.item.Title, Description: ev } }); }} \u003e\u003c/ReactQuill\u003e \u003c/div\u003e \u003cdiv className={styles.column}\u003e \u003cbutton onClick={this.saveClick}\u003eSave Item\u003c/button\u003e \u003c/div\u003e For saving the data and all the on change functions we need to add the below code: constructor(props: IRichTextFieldWebPartProps, state: IRichTextFieldWebPartState) { super(props","date":"2020-Jul-22","objectID":"/2020/07/create-rich-text-control-w-image-and-video-in-sp-fx/:1:0","tags":["SPFx","SharePoint Online","React-Quill"],"title":"Create Rich Text control w/ image and video in SPFx.","uri":"/2020/07/create-rich-text-control-w-image-and-video-in-sp-fx/"},{"categories":["SPFx"],"content":"Conclusion For rich text field in SPFx react quill can be one of the best controls which can be used for saving the rich text field. This will even help us save images and videos in the rich text field in SharePoint List. ","date":"2020-Jul-22","objectID":"/2020/07/create-rich-text-control-w-image-and-video-in-sp-fx/:2:0","tags":["SPFx","SharePoint Online","React-Quill"],"title":"Create Rich Text control w/ image and video in SPFx.","uri":"/2020/07/create-rich-text-control-w-image-and-video-in-sp-fx/"},{"categories":["SPFx"],"content":"Learn how to use PnP DateTimePicker Control in SPFx to add date and time control in SharePoint form customization with the step-by-step guide.","date":"2020-Jul-21","objectID":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/","tags":["SPFx","SharePoint Online","PnP Controls"],"title":"Learn PnP DateTimePicker in SPFx.","uri":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/"},{"categories":["SPFx"],"content":"Introduction When customizing the form with the help of SPFx, we may come across the requirement of using Date Time control. However, if we are using fluent UI react controls, formally known as Office UI fabric React controls, then we do not have control with both date and time. Rather, we only have date picker to overcome this PnP Team has created a DateTimePicker Control this can be easily used and configured in SPFx. To know how we can use it, let’s see the step-by-step guide. ","date":"2020-Jul-21","objectID":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/:1:0","tags":["SPFx","SharePoint Online","PnP Controls"],"title":"Learn PnP DateTimePicker in SPFx.","uri":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/"},{"categories":["SPFx"],"content":"Step 1 - Create an SPFx Solution To create an SPFx solution, we are required to have nodejs v10.x installed. Along with that, we are required to have yeoman and gulp installed and SharePoint framework yeoman generator. Once the environment is ready, we can create a new solution to create a new solution using the below command: yo @microsoft/sharepoint After running the above command, we are presented with multiple questions which we can provide values to, as mentioned in the image below. ","date":"2020-Jul-21","objectID":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/:2:0","tags":["SPFx","SharePoint Online","PnP Controls"],"title":"Learn PnP DateTimePicker in SPFx.","uri":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/"},{"categories":["SPFx"],"content":"Step 2 - Add reference of PnP SPFx Controls To add the reference to the solution for the controls, we can use the below command by adding the reference of PnP SPFx controls we can use many controls which are available. To check all the controls, use the below link. https://pnp.github.io/sp-dev-fx-controls-react/#available-controls npm install @pnp/spfx-controls-react --save --save-exact ","date":"2020-Jul-21","objectID":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/:3:0","tags":["SPFx","SharePoint Online","PnP Controls"],"title":"Learn PnP DateTimePicker in SPFx.","uri":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/"},{"categories":["SPFx"],"content":"Step 3 - Update the code Now let’s use the control in our Web part. Open the file name SamplePnPDateTimePickerWebpart.tsx To add a reference to the control, use the below import statement: import { DateTimePicker, DateConvention, TimeConvention, TimeDisplayControlType } from '@pnp/spfx-controls-react/lib/dateTimePicker'; Now let us add the below state variable. This is where our selected value for the DateTime would be displayed. export interface ISamplePnPDateTimePickerWebpartState { date: any; } Now let us add the control in our render method of the Web part. Use the below code. \u003cDateTimePicker label=\"Start Date Time\" dateConvention={DateConvention.DateTime} timeConvention={TimeConvention.Hours24} value={this.state.date} onChange={this.handleChange} timeDisplayControlType={TimeDisplayControlType.Dropdown} /\u003e Add the below method to handle change. public handleChange = (date: any) =\u003e { alert(date); this.setState({ date: date }); } As we can see, there are multiple properties that are used with the control. Let us look into it. label - This property will accept string value and would be used as the label to control dateConvention - This property accepts Enum value of DateConvention which is either DateTime or Date to either display date and time both the control or only the date field timeConvention - This property also accepts the Enum value of TimeConvention which is either Hours12 or Hours24 value - To indicate where the value is stored can also be used for pre-populating the value by updating the value in the constructor timeDisplayControlType - This field is only helpful when dateConvention is DateTime and not Date. This field also accepts Enum value either as Text or Dropdown For additional properties please check this link with a list of properties. Outcome ","date":"2020-Jul-21","objectID":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/:4:0","tags":["SPFx","SharePoint Online","PnP Controls"],"title":"Learn PnP DateTimePicker in SPFx.","uri":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/"},{"categories":["SPFx"],"content":"Conclusion We can use this control for Selection of Date and Time, as this control is currently not available in Fluent UI. We can even use other libraries for Date and Time Picker like Material UI, Ant Design as per the requirements. ","date":"2020-Jul-21","objectID":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/:5:0","tags":["SPFx","SharePoint Online","PnP Controls"],"title":"Learn PnP DateTimePicker in SPFx.","uri":"/2020/07/learn-pn-p-date-time-picker-in-sp-fx/"},{"categories":["PowerShell"],"content":"The article explains how to create custom PowerShell modules using PowerShell 7 and .NET Core, which allows developers to use PowerShell on all platforms, and provides guidance on installing PowerShell on macOS.","date":"2020-Jul-14","objectID":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/","tags":["PowerShell","macOS"],"title":"How To Create Portable Modules Using PowerShell In macOS","uri":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Introduction With the introduction of PowerShell 7 it is very easy to use PowerShell across all the platforms and so we will want to create our own custom PowerShell modules as well. To do so it is very easy with the introduction of .net core – truly Microsoft is being platform agnostic in terms of development. So let us understand how we can create our own custom module for PowerShell. Before starting let us install PowerShell in macOS. ","date":"2020-Jul-14","objectID":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/:1:0","tags":["PowerShell","macOS"],"title":"How To Create Portable Modules Using PowerShell In macOS","uri":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Install PowerShell in macOS ","date":"2020-Jul-14","objectID":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/:2:0","tags":["PowerShell","macOS"],"title":"How To Create Portable Modules Using PowerShell In macOS","uri":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Step 1 Install Homebrew To run PowerShell we needto have Homebrew. It is a package manager which is used for installing packages which are missing in macOS. Use the below command in the terminal to install Homebrew. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" ![How To Create Portable Modules Using PowerShell In MacOS](https://f4n3x6c5.stackpathcdn.com/article/how-to-create-portable-modules-using-powershell-in-macos2/Images/How To Create Portable Modules Using PowerShell In MacOS.jpg) ","date":"2020-Jul-14","objectID":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/:3:0","tags":["PowerShell","macOS"],"title":"How To Create Portable Modules Using PowerShell In macOS","uri":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Step 2 Install PowerShell Once we have installed Homebrew now we are good to install PowerShell. This is also recommended by Microsoft ;for more details check the link. Use the below command to install PowerShell. brew cask install powershell To test if we have installed it properly or not use the below command: pwsh ","date":"2020-Jul-14","objectID":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/:4:0","tags":["PowerShell","macOS"],"title":"How To Create Portable Modules Using PowerShell In macOS","uri":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Create PowerShell Custom Module To Create Custom module we will use .net core for creating it. Assuming that we have installed .net core already in the environment now let us install it. To install .net core module for creating custom PowerShell module use the below command: dotnet new --install Microsoft.PowerShell.Standard.Module.Template::0.1.3 Now let use create a project for creating custom PowerShell module. To scaffold the project use the below command: dotnet new psmodule There would be bin, obj folder and .csproj and .cs file in the project. Open the code in Visual Studio to check the code. As displayed in the image below to create a custom command we have to inherit the class PSCmdlet and the below three methods define the execution. BeginProcessing() - This method is called when the pipeline starts execution. ProcessRecord() - This method is called for every input which is passed to the command. EndProcessing() - This method is called at the end of pipeline execution. To build the project use the below command: dotnet build Open PowerShell using the below command: pwsh Once we have build the module now we can import it to test our module Use the below command to import the module: Import-Module .\\\\bin\\\\debug\\\\netstandard2.0\\\\powershellmodule.dll Test-SampleCmdlet -FavoriteNumber 3 -FavoritePet Dog ","date":"2020-Jul-14","objectID":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/:5:0","tags":["PowerShell","macOS"],"title":"How To Create Portable Modules Using PowerShell In macOS","uri":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/"},{"categories":["PowerShell"],"content":"Conclusion It is very easy to create custom PowerShell module using any platform of our choice. This module is reusable so once we have developed our custom module we can use it anywhere we want. ","date":"2020-Jul-14","objectID":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/:6:0","tags":["PowerShell","macOS"],"title":"How To Create Portable Modules Using PowerShell In macOS","uri":"/2020/07/how-to-create-portable-modules-using-power-shell-in-mac-os/"},{"categories":["SPFx"],"content":"Learn how to set up SharePoint Framework (SPFx) for cross-platform SharePoint development with ReactJS, VueJS, and Angular on Mac OS.","date":"2020-Jul-03","objectID":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/","tags":["SPFx","SharePoint Online","macOS"],"title":"How To Setup Environment For SharePoint Framework In macOS","uri":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/"},{"categories":["SPFx"],"content":"Introduction SharePoint Framework is one of the most loved development frameworks for the SharePoint developer, as it is cross-platform and completely based on front end technologies like reactjs, vuejs, and angular. Let’s understand how we can set up SharePoint Framework (SPFx) in Mac OS. ","date":"2020-Jul-03","objectID":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/:1:0","tags":["SPFx","SharePoint Online","macOS"],"title":"How To Setup Environment For SharePoint Framework In macOS","uri":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/"},{"categories":["SPFx"],"content":"Step 1 - Install Node.js The first step for setting up our development environment in Mac OS is to install Node.js which is the building block. To install Node.js, follow the below steps. We will use nvm to install nodejs. nvm is a tool that will help us to switch between node versions seamlessly. curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash export NVM_DIR=\"$HOME/.nvm\" [ -s “$NVM_DIR/nvm.sh” ] \u0026\u0026 \\. “$NVM_DIR/nvm.sh” [ -s “$NVM_DIR/bash_completion” ] \u0026\u0026 \\. “$NVM_DIR/bash_completion” nvm install 10.21.0 ![How To Setup Environment For SharePoint Framework In MacOS](https://f4n3x6c5.stackpathcdn.com/article/how-to-setup-environment-for-sharepoint-framework-in-macos/Images/3_Install Node.png) Alternate way without using nvm: Navigate to here. Download the pkg file for node 10 Install the downloaded pkg file Once node is installed we can start to install other dependencies for SharePoint Framework. To test whether the node is installed correctly, run the below command: node -v npm -v ","date":"2020-Jul-03","objectID":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/:2:0","tags":["SPFx","SharePoint Online","macOS"],"title":"How To Setup Environment For SharePoint Framework In macOS","uri":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/"},{"categories":["SPFx"],"content":"Step 2 - Install gulp and Yeoman Now let us install gulp and yeoman where gulp is a task runner and yeoman is a scaffolder. Use the below command: npm install gulp yo —global ","date":"2020-Jul-03","objectID":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/:3:0","tags":["SPFx","SharePoint Online","macOS"],"title":"How To Setup Environment For SharePoint Framework In macOS","uri":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/"},{"categories":["SPFx"],"content":"Step 3 - Install Yeoman SharePoint generator Now let’s install the Yeoman SharePoint generator which will help in creating a client-side solution. We can even use the PnP SharePoint Framework generator. To learn more about PnP Yeoman generator, check out this link. Use the below command to install the Yeoman SharePoint generator: npm install @microsoft/generator-sharepoint –global ","date":"2020-Jul-03","objectID":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/:4:0","tags":["SPFx","SharePoint Online","macOS"],"title":"How To Setup Environment For SharePoint Framework In macOS","uri":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/"},{"categories":["SPFx"],"content":"Step 4 - Download and Install Visual Studio Code Now we are ready to create our SharePoint Framework Project. For that, we are required to have a code editor. We can use one of my favourite editors, Visual Studio Code To install VS Code, navigate to this link, download the pkg file, and install it. ","date":"2020-Jul-03","objectID":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/:5:0","tags":["SPFx","SharePoint Online","macOS"],"title":"How To Setup Environment For SharePoint Framework In macOS","uri":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/"},{"categories":["SPFx"],"content":"Conclusion It is very easy to set up the environment for SharePoint Framework, and hence, it has become very popular among developers. Tooling is cross-platform, so we can use any OS of our choice. ","date":"2020-Jul-03","objectID":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/:6:0","tags":["SPFx","SharePoint Online","macOS"],"title":"How To Setup Environment For SharePoint Framework In macOS","uri":"/2020/07/how-to-setup-environment-for-share-point-framework-in-mac-os/"},{"categories":["SharePoint CSOM"],"content":"How to connect to SharePoint using the Client-side Object Model for .NET Standard with Azure AD OAuth-based authentication from a .NET Core console application.","date":"2020-Jun-29","objectID":"/2020/06/share-point-csom-for-net-standard/","tags":["SharePoint Online","SharePoint CSOM"],"title":"SharePoint CSOM For .NET Standard","uri":"/2020/06/share-point-csom-for-net-standard/"},{"categories":["SharePoint CSOM"],"content":"Introduction SharePoint has an object model known as Client-side object model (CSOM) which is available for .net framework. It wasn’t available for .NET standard, but now Microsoft has provided a much-awaited CSOM for .NET standard. With the release of this, we can easily connect to SharePoint using an Azure AD OAuth based approach from .net core applications. So to understand how CSOM for .NET standard work let’s create a .net core console application and connect to SharePoint and fetch all the items from the list ","date":"2020-Jun-29","objectID":"/2020/06/share-point-csom-for-net-standard/:1:0","tags":["SharePoint Online","SharePoint CSOM"],"title":"SharePoint CSOM For .NET Standard","uri":"/2020/06/share-point-csom-for-net-standard/"},{"categories":["SharePoint CSOM"],"content":"Create Azure AD Application Step 1 Navigate to here. Step 2 Click on Azure Active Directory and click on App registration. Step 3 Click on + New registration to register Azure AD application Step 4 Provide an appropriate name for the application – we will use NETStandardCSOM. Step 5 Navigate to API Permission and select SharePoint for providing appropriate permission. Select delegated permission and check all the required permission. For our demo we will select AllSites.FullControl Step 6 Navigate to the authentication section and Under Default Client type select “Yes”. Step 7 Copy the client ID which got generated after creating the Azure AD application ","date":"2020-Jun-29","objectID":"/2020/06/share-point-csom-for-net-standard/:2:0","tags":["SharePoint Online","SharePoint CSOM"],"title":"SharePoint CSOM For .NET Standard","uri":"/2020/06/share-point-csom-for-net-standard/"},{"categories":["SharePoint CSOM"],"content":"Create a .Net Core Console Application Step 1 Navigate to Visual Studio and create a new project with the template as .net core console application and name the project as NetStandardCSOM. Step 2 Add all the below NuGet packages Microsoft.SharePoint online.CSOM - This library is CSOM for .NET Standard Newtonsoft.Json System.Text.Json System.IdentityModel.Token.Jwt Step 3 Add a class file named AuthenticationManager and add the below code. This is the actual file where all the magic happens to fetch the token store in the cache so we are using OAuth 2.0 Resource Owner Password Credentials for fetching the token. Please replace the client ID which we created in Step 1 in the string name defaultAADAppId. using Microsoft.SharePoint.Client; using System; using System.Collections.Concurrent; using System.Net.Http; using System.Security; using System.Text; using System.Text.Json; using System.Threading; using System.Threading.Tasks; using System.Web; namespace NetStandardCSOM { public class AuthenticationManager : IDisposable { private static readonly HttpClient httpClient = new HttpClient(); private const string tokenEndpoint = \"https://login.microsoftonline.com/common/oauth2/token\"; private const string defaultAADAppId = \"3de78f25-cbf5-4ec4-b9af-349c91904dc5\"; // Token cache handling private static readonly SemaphoreSlim semaphoreSlimTokens = new SemaphoreSlim(1); private AutoResetEvent tokenResetEvent = null; private readonly ConcurrentDictionary\u003cstring, string\u003e tokenCache = new ConcurrentDictionary\u003cstring, string\u003e(); private bool disposedValue; internal class TokenWaitInfo { public RegisteredWaitHandle Handle = null; } public ClientContext GetContext(Uri web, string userPrincipalName, SecureString userPassword) { var context = new ClientContext(web); context.ExecutingWebRequest += (sender, e) =\u003e { string accessToken = EnsureAccessTokenAsync(new Uri($\"{web.Scheme}://{web.DnsSafeHost}\"), userPrincipalName, new System.Net.NetworkCredential(string.Empty, userPassword).Password).GetAwaiter().GetResult(); e.WebRequestExecutor.RequestHeaders[\"Authorization\"] = \"Bearer \" + accessToken; }; return context; } public async Task\u003cstring\u003e EnsureAccessTokenAsync(Uri resourceUri, string userPrincipalName, string userPassword) { string accessTokenFromCache = TokenFromCache(resourceUri, tokenCache); if (accessTokenFromCache == null) { await semaphoreSlimTokens.WaitAsync().ConfigureAwait(false); try { // No async methods are allowed in a lock section string accessToken = await AcquireTokenAsync(resourceUri, userPrincipalName, userPassword).ConfigureAwait(false); Console.WriteLine($\"Successfully requested new access token resource {resourceUri.DnsSafeHost} for user {userPrincipalName}\"); AddTokenToCache(resourceUri, tokenCache, accessToken); // Register a thread to invalidate the access token once's it's expired tokenResetEvent = new AutoResetEvent(false); TokenWaitInfo wi = new TokenWaitInfo(); wi.Handle = ThreadPool.RegisterWaitForSingleObject( tokenResetEvent, async (state, timedOut) =\u003e { if (!timedOut) { TokenWaitInfo wi1 = (TokenWaitInfo)state; if (wi1.Handle != null) { wi1.Handle.Unregister(null); } } else { try { // Take a lock to ensure no other threads are updating the SharePoint Access token at this time await semaphoreSlimTokens.WaitAsync().ConfigureAwait(false); RemoveTokenFromCache(resourceUri, tokenCache); Console.WriteLine($\"Cached token for resource {resourceUri.DnsSafeHost} and user {userPrincipalName} expired\"); } catch (Exception ex) { Console.WriteLine($\"Something went wrong during cache token invalidation: {ex.Message}\"); RemoveTokenFromCache(resourceUri, tokenCache); } finally { semaphoreSlimTokens.Release(); } } }, wi, (uint)CalculateThreadSleep(accessToken).TotalMilliseconds, true ); return accessToken; } finally { semaphoreSlimTokens.Release(); } } else { Console.WriteLine($\"Returning token from cache for resource {resourceUri.DnsSafeHost} and user {userPrincipalName}\"); return accessTokenFromCache; } } private async Task\u003cstr","date":"2020-Jun-29","objectID":"/2020/06/share-point-csom-for-net-standard/:3:0","tags":["SharePoint Online","SharePoint CSOM"],"title":"SharePoint CSOM For .NET Standard","uri":"/2020/06/share-point-csom-for-net-standard/"},{"categories":["SharePoint CSOM"],"content":"Conclusion Now with the release of CSOM for .NET Standard, we can use this in Azure Function v2 which is based on .NET core and connect to SharePoint. We can even use it in all other applications which are based on .NET Standard so we can connect to SharePoint from any platform. ","date":"2020-Jun-29","objectID":"/2020/06/share-point-csom-for-net-standard/:4:0","tags":["SharePoint Online","SharePoint CSOM"],"title":"SharePoint CSOM For .NET Standard","uri":"/2020/06/share-point-csom-for-net-standard/"},{"categories":["PowerApps"],"content":"Learn how to create a custom connector for Microsoft Graph API in PowerApps to access data sources across Microsoft 365 platform for app development.","date":"2020-Jun-23","objectID":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/","tags":["PowerApps","Custom Connector"],"title":"Custom Connector To Connect Graph API In PowerApps","uri":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/"},{"categories":["PowerApps"],"content":"Introduction PowerApps is a platform where we can build no code or less code application. This tool is available with Microsoft 365 suit and is very powerful in terms of application development with lots of functions available as per your needs. But in most cases, when we create a custom application, we would like to connect to the different data sources. One of those data sources for Microsoft 365 is Graph API. This API gives us access to all the applications across the M365 platform. Therefore, to use graph API in Power Apps we need to create a custom connector. Let’s understand how we can create a custom connector for Graph API in PowerApps ","date":"2020-Jun-23","objectID":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/:1:0","tags":["PowerApps","Custom Connector"],"title":"Custom Connector To Connect Graph API In PowerApps","uri":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/"},{"categories":["PowerApps"],"content":"Prerequisites Create an Azure AD Application and provide appropriate access for Graph API. To create an Azure AD application, follow the below steps. Navigate to here. Select Azure Active Directory Azure Service Select the App registration option and click on the + New registration button to register a new application Provide the Name of application “PowerAppGraphAPI” and click on Register Now let’s create a client secret by selecting the option Certificates \u0026 secrets and then selecting + New client secret. This would ask for the description and the expiry time of the secret let us provide “secret” in the description and select never for the expiry time duration. Copy the secret that was generated. It will add the custom connector for PowerApps Now we need to provide access to Graph API to do so click on API permission and click on + Add permission from the Microsoft Graph API section under delegated permission we can select any permission as per our need and can grant admin consent Copy the Azure AD Application ID which was generated and is used while registering the custom connector for Azure AD application ","date":"2020-Jun-23","objectID":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/:2:0","tags":["PowerApps","Custom Connector"],"title":"Custom Connector To Connect Graph API In PowerApps","uri":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/"},{"categories":["PowerApps"],"content":"Step 2 - Create a Custom Connector for Graph API in PowerApps For registering the custom navigator, follow the below steps: Navigate here. Expand the Data section and select Custom Navigator Click on + New custom connector and select create from a blank Provide the name of the connector as GraphAPI and click on continue We would be provided with a form for creating a custom connector with 4 different sections General, Security, Definition, Test In the General, Section Update the hostname with the below value graph.microsoft.com Click on the Security to move forward in the form In the security, section change the authentication type from No authentication to OAuth 2.0 Change the identity provider to Azure Active Directory and paste the client ID and client secret which we generated from the above section while registering Azure AD application In the Resource, URL section update the value as https://graph.microsoft.com Now click on Definition to move forward and complete the registration Click on Create Connector Now navigate back to security and copy the redirect URL and paste In the Azure AD created in the pre-requisite section and add it by clicking on Add a Redirect URI and click on + Add platform and select web and paste the URI and click on configure Now in the definition section click on + New action to add the graph API endpoint Add the values as displayed in the image below In the request part, click on Import from the sample and select Get and in the URL section add /v1.0/me/ In the response part, click on add default response and past the JSON by navigating to graph explorer and getting the JSON here. { \"@odata.context\": \"https://graph.microsoft.com/v1.0/$metadata#users/$entity\", \"businessPhones\": [\"+1 412 555 0109\"], \"displayName\": \"Megan Bowen\", \"givenName\": \"Megan\", \"jobTitle\": \"Auditor\", \"mail\": \"MeganB@M365x214355.onmicrosoft.com\", \"mobilePhone\": null, \"officeLocation\": \"12/1110\", \"preferredLanguage\": \"en-US\", \"surname\": \"Bowen\", \"userPrincipalName\": \"MeganB@M365x214355.onmicrosoft.com\", \"id\": \"48d31887-5fad-4d73-a9f5-3c356e68a038\" } Click on Test and click on Update Connector. Now let’s use this connector in our Power App ","date":"2020-Jun-23","objectID":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/:3:0","tags":["PowerApps","Custom Connector"],"title":"Custom Connector To Connect Graph API In PowerApps","uri":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/"},{"categories":["PowerApps"],"content":"Step 3 - Create PowerApp and use the custom connector To use the custom connector we created, we create a blank canvas application and add the connection to the graph connector that we created Follow the below steps to create PowerApp and add a reference to the custom connector: Navigate to https://make.powerapps.com Click on create Select Canvas app from blank as a type of PowerApps Provide the name of the app as GraphAPIUser and select the format as Tablet Add a four text input, four labels, and button Change the label text as “First Name”, “Last Name”, “Email Address”, “User ID” Change the text of the button as “Fetch User Data” Now add a connection to the GraphAPI connector that we created by selecting data source and expanding connectors section and selecting the connector that we created. Select the button and update the formula to fetch the user data by adding the below formula in OnSelect field UpdateContext({MyProfile:GraphAPI.getmyuserprofile()}) Update the default property of all the four text field with the below values: MyProfile.givenName MyProfile.surname MyProfile.mail MyProfile.id Finally, the application is ready. Now, when we click on the Fetch user Data button, we will get current users details from Graph API. Outcome ","date":"2020-Jun-23","objectID":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/:4:0","tags":["PowerApps","Custom Connector"],"title":"Custom Connector To Connect Graph API In PowerApps","uri":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/"},{"categories":["PowerApps"],"content":"Conclusion With the help of a custom connector, we can leverage graph API in PowerApps. Even custom connector becomes very handy if we want to connect to any third party application whose connector is not available ","date":"2020-Jun-23","objectID":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/:5:0","tags":["PowerApps","Custom Connector"],"title":"Custom Connector To Connect Graph API In PowerApps","uri":"/2020/06/custom-connector-to-connect-graph-api-in-power-apps/"},{"categories":["PowerApps"],"content":"The article explains how the introduction of variables in PowerApps has made it a powerful no-code tool for easy development, and provides a comprehensive guide on how to use variables in PowerApps.","date":"2020-Jun-23","objectID":"/2020/06/variables-in-power-apps/","tags":["PowerApps"],"title":"Variables In PowerApps","uri":"/2020/06/variables-in-power-apps/"},{"categories":["PowerApps"],"content":"Introduction With the introduction of PowerApps, more and more users are moving into PowerApps development for easy and no-code development tools. However, users from a coding background found it difficult, as there were no variables in PowerApps. Not now, with the introduction of variables in PowerApps, it has become a Powerful no-code tool. So let’s understand PowerApps Variables and how they works. ","date":"2020-Jun-23","objectID":"/2020/06/variables-in-power-apps/:1:0","tags":["PowerApps"],"title":"Variables In PowerApps","uri":"/2020/06/variables-in-power-apps/"},{"categories":["PowerApps"],"content":"Types of Variables Just as we have different scopes of variables in the programming language in PowerApps, we also have different scoped variables the three different types of variables which are available in PowerApps, as mentioned below: Variables types Scope Description Functions related to variable Global variable App This is similar to a global variable in programming language and it can hold a number, text string, Boolean, record, table, etc as a data value Set Context variables Screen This is similar to the parameter which we pass to methods or procedure and this variable can be referenced from only one screen UpdateContext Navigate Collections This variable can store table which can be referenced across anywhere in the app Collect, ClearCollect ","date":"2020-Jun-23","objectID":"/2020/06/variables-in-power-apps/:2:0","tags":["PowerApps"],"title":"Variables In PowerApps","uri":"/2020/06/variables-in-power-apps/"},{"categories":["PowerApps"],"content":"Creating and Removing Variables In all programming languages, we declare a variable before using the variable but such is not the case with PowerApps. So, in PowerApps we never declare variables explicitly. In terms of typing, PowerApps has implicit typing. So, we do not require to specify the type of variable for example int a = 0 in programming language indicated the variable is of type integer but in PowerApps we do not require to specify the type of variable. To create a variable, we just need to run the function: Set(global Variable, \"Hello World\") Update Context({context Variable:\"Hello World\"}) Collect( collection Variable, \"Hello World\" ) Where X is the variable name and Hello World is the value of that variable. For removing the variable, we are required to remove all Set, UpdateContext, Navigate, Collect, or ClearCollect functions that implicitly establish the variable. If these functions are not present then there is no variable. We must even remove the variable reference if used in other places. To properly understand all the three different types of the variable, we can create a small example. ","date":"2020-Jun-23","objectID":"/2020/06/variables-in-power-apps/:3:0","tags":["PowerApps"],"title":"Variables In PowerApps","uri":"/2020/06/variables-in-power-apps/"},{"categories":["PowerApps"],"content":"Global Variable To understand the global variable, we can create a sample canvas app. Let’s create it using the below step: Navigate to here. Click on create Select Canvas app from blank as a type of PowerApps Provide the name of the app as GlobalVariable and select the format as Tablet Add a text input, label, and button from the insert table Select the button and update the formula in OnSelect Set(global Variable,TextInput1.Text) Now select the label field and update the formula in the Text field global Variable To check all global variables in PowerApps click on File, then click on Variables. This would display all the global variables present in the app. To check all the references, click on the variable. This would display where the variable definition is present and where it is used This app will update the variable value as entered in the text field and display it in the label accordingly. ","date":"2020-Jun-23","objectID":"/2020/06/variables-in-power-apps/:4:0","tags":["PowerApps"],"title":"Variables In PowerApps","uri":"/2020/06/variables-in-power-apps/"},{"categories":["PowerApps"],"content":"Context Variable To understand the context variable, we can create a sample canvas app. Let’s create it using the below step: Navigate to here. Click on create Select Canvas app from blank as a type of PowerApps Provide the name of the app as contextVariable and select the format as Tablet Add a text input, label, and button from the insert table Select the button and update the formula in OnSelect Update Context({contextVariable:TextInput1.Text}) Now select the label field and update the formula in the Text field context Variable To check all context variables in PowerApps click on File, then click on Variables. This displays all the screens present in the app. To check all context variables inside the screen, select the screen. To check all the references, click on the variable. This would display where the variable definition is present and where it is used. This app will update the variable value as entered in the text field and display it in the label accordingly. ","date":"2020-Jun-23","objectID":"/2020/06/variables-in-power-apps/:5:0","tags":["PowerApps"],"title":"Variables In PowerApps","uri":"/2020/06/variables-in-power-apps/"},{"categories":["PowerApps"],"content":"Collections Variable To understand the collections variable, we can create a sample canvas app. Let’s create it using the below step: Navigate to here. Click on create Select Canvas app from blank as a type of PowerApps Provide the name of the app as collection variable and select the format as Tablet Add a five text input, two-button and Data table from the insert table Select the button and update the formula in OnSelect and change the text to Submit Collection Collect(formDataTemp,{Name:TextInput1.Text,temp1:TextInput2.Text,temp2:TextInput3.Text,temp3:TextInput4.Text,temp4:TextInput5.Text}) Now select the Data table and update the formula in Items field formDataTemp To clear the data from the collection, select the second button and change the text to Clear Data and update the OnSelect field with the below formula Clear(formDataTemp) To check all collections variables in PowerApps click on File, then click on Collections. This would display all the collections variables present in the app. It would also display the first five items in the collections variable This app will update the variable value as entered in all the text fields and display it in the data table accordingly. To clear the data, we can click on the Clear Data button. ","date":"2020-Jun-23","objectID":"/2020/06/variables-in-power-apps/:6:0","tags":["PowerApps"],"title":"Variables In PowerApps","uri":"/2020/06/variables-in-power-apps/"},{"categories":["PowerApps"],"content":"Conclusion With the introduction to variables in PowerApps, it has become a powerful tool for no-code application. Use variables in your application wisely, as they use the application memory. ","date":"2020-Jun-23","objectID":"/2020/06/variables-in-power-apps/:7:0","tags":["PowerApps"],"title":"Variables In PowerApps","uri":"/2020/06/variables-in-power-apps/"},{"categories":["SPFx"],"content":"This article shows the basic Markdown syntax and format.","date":"2020-Jun-22","objectID":"/2020/06/how-to-use-property-field-collection-data-in-sp-fx-property-pane/","tags":["SPFx","SharePoint Online"],"title":"How To Use PropertyFieldCollectionData In SPFx Property Pane","uri":"/2020/06/how-to-use-property-field-collection-data-in-sp-fx-property-pane/"},{"categories":["SPFx"],"content":"Introduction With the introduction of the SharePoint Framework (SPFx) , front end development has become very easy and hosting of the webpart is taken care of by SharePoint, which does not require an additional server. So the use of SPFx is growing exponentially and the best part of SPFx webparts is they are easy to configure. To Configure SPFx web part we have Property Pane which opens up in a panel and we can add any controls as per our need. Out of the box SPFx has given us many controls but there are a few controls which are not available. To tackle this we have the PnP Community which takes care of creating reusable property pane controls. To check all the property pane controls check the link. Let us look into one of the controls which is very helpful if we want to fetch the data in SPFx configuration. This control is known as PropertyFieldCollectionData. To check the complete documentation go to this link. Types of Fields which we can create in PropertyFieldCollectionData Type Description string This will create a text field to store the string value number This will be a text field which accepts only number value Boolean This will create a checkbox which can store a Boolean value dropdown This will create dropdown fields where we can specify options value fabricIcon This will create an icon Url This will create a URL field custom This gives control for custom rendering of the field In this article, we will cover the step by step process of how to use this control in our SPFx Project. Step 1- Create a SPFx solution and webpart Run the below sequence of commands in the command prompt or nodejs command prompt. Below command will be used to create a folder md PnPPropertyFieldCollectionData cd PnPPropertyFieldCollectionData Let us now create the SPFx project in the above-created folder. yo @microsoft/sharepoint Now let us install the required npm package to use PnP Property pane control. npm install @pnp/spfx-property-controls npm install @pnp/spfx-controls-react --save --save-exact Step 2 - Update the code Open the PnpPropertyFieldCollectionDataWebPart.ts file and add the below code. Update the import with the below code. import { PropertyFieldCollectionData, CustomCollectionFieldType } from '@pnp/spfx-property-controls/lib/PropertyFieldCollectionData'; Add the variable in the property interface, the variable would be of type any[] as it would store collection of data items. export interface IPnpPropertyFieldCollectionDataWebPartProps { description: string; collectionData: any[]; } We can have many different types of columns for our data collection and if we need to have a custom column as well we can create them. For the demo we are using string, number, dropdown, Boolean and in the custom field we are using PnP People Picker control. Add the below code in getPropertyPaneConfiguration() method insides the groups collection. PropertyFieldCollectionData(\"collectionData\", { key: \"collectionData\", label: \"Collection data\", panelHeader: \"Collection data panel header\", manageBtnLabel: \"Manage collection data\", value: this.properties.collectionData, fields: [ { id: \"Title\", title: \"Firstname\", type: CustomCollectionFieldType.string, required: true }, { id: \"Lastname\", title: \"Lastname\", type: CustomCollectionFieldType.string }, { id: \"Age\", title: \"Age\", type: CustomCollectionFieldType.number, required: true }, { id: \"City\", title: \"Favorite city\", type: CustomCollectionFieldType.dropdown, options: [ { key: \"pune\", text: \"Pune\" }, { key: \"junagadh\", text: \"Junagadh\" } ], required: true }, { id: \"Sign\", title: \"Signed\", type: CustomCollectionFieldType.boolean }, { id: \"customFieldId\", title: \"People picker\", type: CustomCollectionFieldType.custom, onCustomRender: (field, value, onUpdate, item, itemId, onError) =\u003e { return ( React.createElement(PeoplePicker, { context: this.context, personSelectionLimit: 1, showtooltip: true, key: itemId, defaultSelectedUsers: [item.customFieldId], selectedItems: (items: any[]) =\u003e { console.log('I","date":"2020-Jun-22","objectID":"/2020/06/how-to-use-property-field-collection-data-in-sp-fx-property-pane/:1:0","tags":["SPFx","SharePoint Online"],"title":"How To Use PropertyFieldCollectionData In SPFx Property Pane","uri":"/2020/06/how-to-use-property-field-collection-data-in-sp-fx-property-pane/"},{"categories":["SPFx"],"content":"Conclusion So with PropertyFieldCollectionData control, we can create a complete form with different fields where the data can be stored and can be retrieved. This can be very helpful when we need to use this for configuring email templates and when we want the webpart to have multiple configurations. ","date":"2020-Jun-22","objectID":"/2020/06/how-to-use-property-field-collection-data-in-sp-fx-property-pane/:2:0","tags":["SPFx","SharePoint Online"],"title":"How To Use PropertyFieldCollectionData In SPFx Property Pane","uri":"/2020/06/how-to-use-property-field-collection-data-in-sp-fx-property-pane/"},{"categories":["PowerShell"],"content":"The article guides readers on using PnP PowerShell to perform CRUD operations for SharePoint Framework webparts, simplifying maintenance and automation.","date":"2020-Jun-08","objectID":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/","tags":["SPFx","PowerShell"],"title":"CRUD Operation On SPFx Webpart Using PnP PowerShell","uri":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/"},{"categories":["PowerShell"],"content":"Introduction With the introduction to SharePoint Framework (SPFx), creating webparts using frontend technologies has been very easy. But what if we want to maintain it and create some automation for adding, updating, or deleting this SPFx webparts? In this scenario, PnP PowerShell helps us with all the CRUD operations for SPFx webparts. So let us check how we can utilize this. ","date":"2020-Jun-08","objectID":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/:1:0","tags":["SPFx","PowerShell"],"title":"CRUD Operation On SPFx Webpart Using PnP PowerShell","uri":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/"},{"categories":["PowerShell"],"content":"Installation of PnP PowerShell Installing PnP PowerShell is very easy. There are two methods. If you are using Windows 10 then running the below command in PowerShell will install the PnP PowerShell module Install-Module SharePointPnPPowerShellOnline -Scope CurrentUser Install the executable by downloading it from the below link. ","date":"2020-Jun-08","objectID":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/:2:0","tags":["SPFx","PowerShell"],"title":"CRUD Operation On SPFx Webpart Using PnP PowerShell","uri":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/"},{"categories":["PowerShell"],"content":"Add SPFx Webpart in Site Page Before Running the below commands we need to first connect sitecollection. To do so we can use the below command: Connect-PnPOnline \u003csitecollection URL\u003e For adding SPFx webpart there are two options, We add out of the box webpart We add custom created webpart For Adding Out of the box webpart we can run the below command Add-PnPClientSideWebPart -Page TestPage -DefaultWebPartType Image -WebPartProperties '{\"imageSource\":\"https://testinglala.sharepoint.com/sites/Test/SiteAssets/SitePages/mypage/1789636885Scottish-wildcat-in-the-grass.jpg\"}' Note In the –DefaultWebPartType we can use any of the out of the box webpart names. For Adding Custom SPFx Webpart we can use the below command, Add-PnPClientSideWebPart -Page TestPage -Component \"ie11Test\" Available Parameters Page - This parameter accepts a string and we can provide the name of the page where we want to add the webpart Section - This parameter accepts integer values which indicate in which section we want to add the SPFx webpart Column - This parameter also accepts integer values and indicate in which column we want to add SPFx webpart Component - To add custom SPFx webpart we need to use this parameter. We can either provide GUID or the name of the component DefaultWebPartType - To add Out of the box webpart we can specify the name of the webpart in this parameter Order - This parameter accepts integer values and indicates the order of the webpart WebPartProperties - To specify the property of the webpart we can use this field it can be used both in Custom SPFx webpart as well Out of the box webparts ","date":"2020-Jun-08","objectID":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/:3:0","tags":["SPFx","PowerShell"],"title":"CRUD Operation On SPFx Webpart Using PnP PowerShell","uri":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/"},{"categories":["PowerShell"],"content":"Update SPFx Webpart in Site Page To update the SPFx webpart we want to update the webpart properties. This can be easily achieved using the below command: Set-PnPClientSideWebPart -Page TestPage -Identity f6e82e11-f2d7-4bf3-a90a-c7ada44bfbba -PropertiesJson '{\"description\":\"Testing123\"}' Available Parameters Identity - This parameter accepts the ID of the webpart. This can accept title or instance id of the webpart. Page - This parameter accepts a string and we can provide the name of the page where we want to update the webpart. PropertiesJson - To update the property values we can provide the JSON. In this parameter it’s displayed in the command above. Title - To update the internal title of the webpart Note This parameter will not update the title which is displayed for the webpart. ","date":"2020-Jun-08","objectID":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/:4:0","tags":["SPFx","PowerShell"],"title":"CRUD Operation On SPFx Webpart Using PnP PowerShell","uri":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/"},{"categories":["PowerShell"],"content":"Fetch All SPFx Webpart in Site Page To fetch all the webparts present in the Site Page we can use the below command. This would enumerate all the client-side webparts. Get-PnPClientSideComponent -Page TestPage Available Parameters InstanceId - This parameter accepts the ID of the webpart. This can accept title or instance id of the webpart. Page - This parameter accepts a string and we can provide the name of the page where we want to get the webpart. ","date":"2020-Jun-08","objectID":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/:5:0","tags":["SPFx","PowerShell"],"title":"CRUD Operation On SPFx Webpart Using PnP PowerShell","uri":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/"},{"categories":["PowerShell"],"content":"Delete SPFx Webpart in Site Page To remove any specific instance of the webpart in the site page we can use the below command which would delete the instance from the page. Remove-PnPClientSideComponent -Page Home -InstanceId a2875399-d6ff-43a0-96da-be6ae5875f82 Available Parameters Force - If we want to skip the confirmation for deleting the webpart we can use this parameter InstanceId - This parameter accepts the ID of the webpart. This can accept title or instance id of the webpart Page - This parameter accepts a string and we can provide the name of the page where we want to delete the webpart. ","date":"2020-Jun-08","objectID":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/:6:0","tags":["SPFx","PowerShell"],"title":"CRUD Operation On SPFx Webpart Using PnP PowerShell","uri":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/"},{"categories":["PowerShell"],"content":"Conclusion From the above commands, we can conclude that for automating the process adding, creating, updating or deleting the webpart becomes easy using the PnP PowerShell command and it becomes very easy to maintain the Site Pages using these commands. We can even leverage this to automate the modern page creation by adding webparts as per our need using above command. ","date":"2020-Jun-08","objectID":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/:7:0","tags":["SPFx","PowerShell"],"title":"CRUD Operation On SPFx Webpart Using PnP PowerShell","uri":"/2020/06/crud-operation-on-share-point-sp-fx-webpart-using-pn-p-power-shell/"},{"categories":["Microsoft Teams"],"content":"Setting up the PnP Yeoman scaffolder for Teams applications to extend the capabilities of Microsoft Teams and creating a sample bot for better collaboration.","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Introduction With the increase in Microsoft Teams adoption, companies are switching to Microsoft team’s development for extending the capabilities for Microsoft Teams for better collaboration. To make this development easy to use and to centralize it, the PnP team has generator a yeoman scaffolder for Teams applications. So let’s look into setting up the environment and creating a sample bot for Microsoft Teams. ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:1:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Environment Setup ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:2:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 1 - Install nvm-windows We will use nvm-windows for installing Node.js because we can easily use a different version of Node.js and upgrading Node.js or using the previous version using nvm-windows is very easy. However, we can skip this step if we want to install Node.js directly. Download nvm-windows from below link use nvm-setup.zip file for more information on nvm-windows check my blog https://github.com/coreybutler/nvm-windows/releases ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:3:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 2 - Install the latest version of Node.js We can install Node.js directly from the below link: https://nodejs.org/en/download/ If we are using nvm-windows, use the below command to install the latest version of Node.js: nvm install latest ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:4:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 3 - Install Yeoman and Gulp CLI To scaffold projects using the Teams generator, we need to install the Yeoman tool as well as the Gulp CLI task manager. Using the below command, we are able to install the above dependencies. npm install yo gulp-cli –global ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:5:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 4 - Install Yeoman generator for Microsoft Teams apps Now we need to install the Yeoman generator for Microsoft Teams. Use the below command to install it. npm install generator-teams –global To install the preview version which would provide the feature which is still in preview, use the below command: npm install generator-teams@preview –global ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:6:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Generate Bot Project for Microsoft Teams ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:7:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 1 - Create a Folder Let’s create a bot for Microsoft teams. To create the bot, we would use yeoman teams generator for scaffolding the project: To create a project for use of the project files, use the below command to create a folder: mkdir yoTeamsBot Now let’s navigate to the created folder using the below command: cd yoTeamsBot ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:8:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 2 - Create an Azure AD Application and Register a New Bot To create a Bot, we are required to register an Azure AD application. To register a new application, use the below steps: Navigate to here. Select Azure Active Directory and from the left navigation, select App registrations. Click on New Registration, as displayed in the image below. Add an appropriate name for the application and register the application (Copy the Client ID that is generated). ** ** Once the application is created, click on Certificates and Secret and Create a Client Secret Copy. This we use while generating the application. ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:9:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Register for Bot Application We are now required to register the Bot Application for registration. Follow the below steps: Navigate to here. Fill up the form with appropriate data, as displayed in the image below. Use the Azure Ad client ID which we have created in the above process. In the field, paste your app ID below to continue. ** ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:10:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 3 - Create a Bot application Create the project using the below command: yo teams There are multiple questions that could be asked before generating the project. Use the below answers for generating the project. What is your solution name? yo-teams-bot Where do you want to place the files? Use the current folder Title of your Microsoft Teams App project? yoTeamsBot Your (company) name? (max 32 characters) Which manifest version would you like to use? v1.6 Enter your Microsoft Partner ID, if you have one? (Leave blank to skip) What features do you want to add to your project? A bot The URL where you will host this solution? https://yoteamsbot.azurewebsites.net Would you like to show a loading indicator when your app/tab loads? No Would you like to include the Test framework and initial tests? No Would you like to use Azure Applications Insights for telemetry? No What type of bot would you like to use? A new bot Framework bot What is the name of your bot? yoTeamsBot What is the Microsoft App ID for the bot? It’s found in the Bot Framework portal (https://dev.botframework.com). Use the above step to create Azure AD Application ID Do you want to add a static tab to your bot? No Do you want to support file upload to the bot? No ** ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:11:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 4 - Update the Code Open the .env file. Add the MICROSOFT_APP_PASSWORD value with the client secret that we created while generating the Azure AD application. ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:12:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 5 - Run the Bot Application gulp ngrok-serve ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:13:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Step 6 - Add the Manifest to MS Teams Navigate to the Package folder inside the package folder which is created once we run the above command. A zip file is created inside the package folder which is used in MS Teams for registering our Bot. This is the manifest file that is generated. Open MS Teams Navigate to Apps section in Navigation. On the left search for App Studio, add open App Studio, and select Manifest editor. Click on Import an existing app and select the Manifest file present in the package folder. Once the import is completed, install the application by selecting the application and Click on Test and Distribution present in the Finish Section Outcome Now we can use our code to send and receive a message in MS Teams! ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:14:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["Microsoft Teams"],"content":"Conclusion Using the PnP Teams generator for creating Microsoft Teams application is very easy and we can leverage open source technologies and Javascript development. We can even develop Tabs, an outgoing webhook, a connector, a messaging extension for Microsoft Teams. ","date":"2020-Jun-03","objectID":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/:15:0","tags":["Yo Teams","Teams Tab"],"title":"How To Setup Environment For Yeoman Teams Generator","uri":"/2020/06/how-to-setup-environment-for-yeoman-teams-generator/"},{"categories":["SharePoint Online","SPFx"],"content":"In this article, we will learn how to use the PnP search filter and search a vertical web part","date":"2020-May-27","objectID":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use PnP Search Filters And Search Vertical Web Parts","uri":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/"},{"categories":["SharePoint Online","SPFx"],"content":"Introduction In this article, we will learn how to use the PnP search filter and search a vertical web part Prerequisites - PnP search result and search box web part added in Modern Page - To understand better, check out my article on how to use and configure the PnP search Web part ","date":"2020-May-27","objectID":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/:1:0","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use PnP Search Filters And Search Vertical Web Parts","uri":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/"},{"categories":["SharePoint Online","SPFx"],"content":"Setup Below are the steps to use PnP Search Filters and Search Vertical Web part ","date":"2020-May-27","objectID":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/:2:0","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use PnP Search Filters And Search Vertical Web Parts","uri":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/"},{"categories":["SharePoint Online","SPFx"],"content":"Step 1 Add PnP Search Filters and Search Vertical Web part to an existing search modern page ","date":"2020-May-27","objectID":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/:3:0","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use PnP Search Filters And Search Vertical Web Parts","uri":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/"},{"categories":["SharePoint Online","SPFx"],"content":"Step 2 - Configure the web parts PnP Search Filters Webpart This web part is used for providing a filter to the search result so that the user can drill down their results to fetch their desired result. Refiners We can select the managed property for displaying the search filter. This managed property should be refinable. We can even provide custom labels for the managed property. We can specify the sort type and sort order for the refiner. Connect to search results Web Part _The search results from Web Part to use on the current page to get filters. Web part title Displays the web part title we can keep it blank if we do not want to display the title Show blank if no result It would not display any filters if there are no filter results for the search term Filter layout We can choose from the two different layout present Vertical - It would display the filter result in the page itself Panel - It would open a panel on click of filter icon and we can select the filter result from the panel displayed PnP Search Vertical Web part This web part is used for providing different scopes which can be used by users to fetch their desired result Search verticals We can configure different scopes by providing the Tab name(Display name), Query Template, result source identified, Office UI Fabric icon (this icon would be displayed). If we want to open the scope on another page then we can select Is hyperlink and provide the Link URL which would be used for redirecting the user. We can even select open behavior that could be open in a new tab or open in the current tab. Show result count If we want to display the result count against the scope we can toggle it to on Connect to a search results Web Part The search results from Web Part to use on the current page. Step 3 - Update the Search Result web part wit the below setting ———— Edit the search result web part and navigate to the second page or section and update the below settings: Use refiners from this component In the dropdown, select the Search Filters so that it would connect to the search filters web part. Use verticals from this component In the dropdown, select the Search Verticals so that it would connect to the search verticals. ","date":"2020-May-27","objectID":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/:4:0","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use PnP Search Filters And Search Vertical Web Parts","uri":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/"},{"categories":["SharePoint Online","SPFx"],"content":"Outcome ","date":"2020-May-27","objectID":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/:5:0","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use PnP Search Filters And Search Vertical Web Parts","uri":"/2020/05/how-to-use-pn-p-search-filters-and-search-vertical-web-parts/"},{"categories":["SPFx","SharePoint Online"],"content":"PnP has released Modern Search webparts to enable customized search in SharePoint Modern sites without the ability to change templates in Modern Pages","date":"2020-May-27","objectID":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use And Configure PnP Search WebPart","uri":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/"},{"categories":["SPFx","SharePoint Online"],"content":"Overview In this article we will understand the complete process of using PnP search webpart in SharePoint Modern Pages. ","date":"2020-May-27","objectID":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/:1:0","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use And Configure PnP Search WebPart","uri":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/"},{"categories":["SPFx","SharePoint Online"],"content":"Introduction In SharePoint, with the introduction of Modern Sites and Modern Pages, we aren’t able to change templates in Modern Pages, so if we want to use a customized search in SharePoint Modern sites it would be best to use some existing webparts. To that end, PnP has released Modern Search webparts which will be very helpful and easy to configure. So let’s start configuring it. Step 1 Download the latest release of PnP Search webpart using the below link to download the webpart: Link : https://github.com/microsoft-search/pnp-modern-search/releases Step 2 Upload the .sppkg file in the App Catalog. We can use any of the app catalog site collections or tenant level app catalogs. In the popup click on deploy to deploy the solution Step 3 Add the app in the site collection using “+ New” button present in the home page. Select PnP Modern Search - Search Web parts Step 4 - Create a Modern page \u0026 set up the required search webpart Add Search box webpart – This will be used as search text box where we can add a search term for the search results Add Search results webpart – This will be used for displaying the search results associated with search box. Configuration for Search box Below are all the configurations that can help you setup the PnP Search box Use a dynamic data source - This will help if we want to send search text using query string from another page. By checking this there will be multiple extra configurations which are: Connect to Source - For the query string configuration we can select Page environment. Page environment’s properties - We want to fetch the data from Query string so we can select that value. Query string - In this as we are not using URL fragment to fetch the data we should select Query parameters queryParameters’s properties - This indicates which parameter will help us fetch the data so we will use q (the URL would have ?q=) Note:-If the dropdown does not display q add it in the URL and refresh the page (?q=test\u0026Mode=Edit) Enable query suggestions - We can enable it to get the suggestion for the entered query text Placeholder text in search box - This will help if we want to display some text in the search text box in the background as Placeholder. Send the query to a new page - If we want to redirect the user to some other page then we can enable it. On enabling it will have an additional three properties - Page URL, Opening behavior, Method. For demo configuration we will not enable sending the query to a new page ","date":"2020-May-27","objectID":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/:2:0","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use And Configure PnP Search WebPart","uri":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/"},{"categories":["SPFx","SharePoint Online"],"content":"Configuration for Search results The configuration for search results is divided into three section or pages Section 1(connection to Search Text box) Search query keywords :- If we want to display some data for static keyword we can enter it directly in the text box. But we want to connect to the search box so that we will obtain dynamic results based on the search text in the search box. Click on the three dots (…) and select connect to source. Connect to source :- In this dropdown we can select search box as we want to display search results based on search box query text Search Box’s properties :- We can select search query for fetching the search text Section 2 (search, pagination setting) Search Setting, Query template - This will accept any KQL based query . This will help if we want to remove results from a specific path or if we want to boost some results based on XRANK Result Source Identifier - We can specific the result source from where we want to display the data (optional in case we are using Query template where we can specify the same) Sort order - This indicates on which properties the sorting of the data is based Sortable properties - This will help us adding sorting based on the managed property we can add any fields which are displayed in the search results Connect to a search refiners Web Part - This will be used if we want to add additional filters to the results. This will also use managed property to filter based on the fields which are displayed in the search results Connect to search verticals - This will be used if we are using PnP search verticals webpart Enable Query Rules - This will display SharePoint promoted results and make the result block available for custom render if enabled. Include personal OneDrive results - This will add personal OneDrive results also in the search. Selected Properties - To retrieve the properties displayed in the search results we can specify the managed properties in this field Enable taxonomy values localization for refiners and results :- This will help if there are any other language variations for the taxonomy value then based on the users preferred language it will display the result Language of search request - This field indicates in which language we want to display the result; by default it will use the current UI language Synonyms - We can define synonyms for some query text and we can use two-way mode. Pagination Setting Show paging - This indicates whether the pagination be displayed in the webpart or not Number of items per page - Number of items to be displayed in the search result in one page Number of pages to display in range - Numbers to display in the page navigation Hide navigation buttons - Hide the previous and next button Hide first/last navigation buttons - Hide the last and first navigation button Hide navigation buttons if they are disabled - If no page is available hide the navigation Section 3 (style, template setting) Style Setting Web part title - Displays the webpart title. We can keep it blank if we do not want to display the title Show blank if no result - It would not display any result or text if there are no results for the search term Show results count - Displays the total number of results obtained for the search term Results layout - We can select from the predefined option or we can customize where we can specify our own layout. For that select the edit layout option. We can use a handlebar to create the template Result Types - Allows us to set custom template at item level (ex:- Filetype equals ‘docx’) Template Setting Manage columns - This will help in selecting the managed property that we would like to display in the search results by adding managed property it would display in the search result Show file icon - If we want to display the file type icon we can enable it Compact mode - if we want to display the result in compact mode we can enable it Outcome ","date":"2020-May-27","objectID":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/:3:0","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use And Configure PnP Search WebPart","uri":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/"},{"categories":["SPFx","SharePoint Online"],"content":"Summary We checked how easy it is to configure and use PnP Modern Search Webparts. We can even use other webparts which are available as a part of the package like Search Filters and Search Navigation. ","date":"2020-May-27","objectID":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/:4:0","tags":["PnP Search","SPFx","SharePoint Online"],"title":"How To Use And Configure PnP Search WebPart","uri":"/2020/05/how-to-use-and-configure-pn-p-search-web-part/"},{"categories":null,"content":"About Kunj Sangani","date":"2019-Aug-02","objectID":"/about/","tags":null,"title":"About Kunj Sangani","uri":"/about/"},{"categories":null,"content":"👋 Hey there! I’m a Microsoft 365 consultant and architect with 9 years of experience 💼. I’m happily married and a proud dad of a baby boy. 👨‍👩‍👦 I absolutely love spending time with my family! 👨‍💻 I’ve worked extensively on SharePoint, Teams, Power Platform, and Azure Active Directory. I’m particularly passionate about OAuth 2.0 and love to stay up-to-date with the latest developments. 🤓 👨‍👩‍👧‍👦 When I’m not working, I’m an active member of the Pune Tech community. I love open-source and contributing to it. 🤝 I also love sharing my knowledge and frequently speak at community events. 🎤 If you want to learn more about me or have any questions, feel free to reach out! 📩 ","date":"2019-Aug-02","objectID":"/about/:0:0","tags":null,"title":"About Kunj Sangani","uri":"/about/"},{"categories":null,"content":"Work TimeLine ","date":"2019-Aug-02","objectID":"/about/:0:1","tags":null,"title":"About Kunj Sangani","uri":"/about/"}]